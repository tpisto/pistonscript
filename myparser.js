module.exports = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successful,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var parseFunctions = {
        "Start": parse_Start
      };
      
      var options = arguments.length > 1 ? arguments[1] : {},
          startRule;
      
      if (options.startRule !== undefined) {
        startRule = options.startRule;
        
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Can't start parsing from rule " + quote(startRule) + ".");
        }
      } else {
        startRule = "Start";
      }
      
      var pos = 0;
      var reportedPos = 0;
      var cachedReportedPos = 0;
      var cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function computeReportedPosDetails() {
        function advanceCachedReportedPos() {
          var ch;
          
          for (; cachedReportedPos < reportedPos; cachedReportedPos++) {
            ch = input.charAt(cachedReportedPos);
            if (ch === "\n") {
              if (!cachedReportedPosDetails.seenCR) { cachedReportedPosDetails.line++; }
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = false;
            } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
              cachedReportedPosDetails.line++;
              cachedReportedPosDetails.column = 1;
              cachedReportedPosDetails.seenCR = true;
            } else {
              cachedReportedPosDetails.column++;
              cachedReportedPosDetails.seenCR = false;
            }
          }
        }
        
        if (cachedReportedPos !== reportedPos) {
          if (cachedReportedPos > reportedPos) {
            cachedReportedPos = 0;
            cachedReportedPosDetails = { line: 1, column: 1, seenCR: false };
          }
          advanceCachedReportedPos();
        }
        
        return cachedReportedPosDetails;
      }
      
      function text() {
        return input.substring(reportedPos, pos);
      }
      
      function offset() {
        return reportedPos;
      }
      
      function line() {
        return computeReportedPosDetails().line;
      }
      
      function column() {
        return computeReportedPosDetails().column;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_Start() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse___();
        if (r3 !== null) {
          r4 = parse_Program();
          if (r4 !== null) {
            r5 = parse___();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(program) { return program; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_SourceCharacter() {
        var r0;
        
        if (input.length > pos) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        return r0;
      }
      
      function parse_WhiteSpace() {
        var r0;
        
        reportFailures++;
        if (input.charCodeAt(pos) === 9) {
          r0 = "\t";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\t\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 11) {
            r0 = "\x0B";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\x0B\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 12) {
              r0 = "\f";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\f\"");
              }
            }
            if (r0 === null) {
              if (input.charCodeAt(pos) === 32) {
                r0 = " ";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\" \"");
                }
              }
              if (r0 === null) {
                if (input.charCodeAt(pos) === 160) {
                  r0 = "\xA0";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\xA0\"");
                  }
                }
                if (r0 === null) {
                  if (input.charCodeAt(pos) === 65279) {
                    r0 = "\uFEFF";
                    pos++;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\uFEFF\"");
                    }
                  }
                  if (r0 === null) {
                    r0 = parse_Zs();
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("whitespace");
        }
        return r0;
      }
      
      function parse_LineTerminator() {
        var r0;
        
        if (/^[\n\r\u2028\u2029]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        return r0;
      }
      
      function parse_LineTerminatorSequence() {
        var r0;
        
        reportFailures++;
        if (input.charCodeAt(pos) === 10) {
          r0 = "\n";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\n\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === "\r\n") {
            r0 = "\r\n";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 13) {
              r0 = "\r";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\r\"");
              }
            }
            if (r0 === null) {
              if (input.charCodeAt(pos) === 8232) {
                r0 = "\u2028";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (r0 === null) {
                if (input.charCodeAt(pos) === 8233) {
                  r0 = "\u2029";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u2029\"");
                  }
                }
              }
            }
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("end of line");
        }
        return r0;
      }
      
      function parse_Comment() {
        var r0;
        
        reportFailures++;
        r0 = parse_MultiLineComment();
        if (r0 === null) {
          r0 = parse_SingleLineComment();
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("comment");
        }
        return r0;
      }
      
      function parse_MultiLineComment() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        if (input.substr(pos, 2) === "/*") {
          r2 = "/*";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          r7 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "*/") {
            r6 = "*/";
            pos += 2;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          reportFailures--;
          if (r6 === null) {
            r6 = "";
          } else {
            r6 = null;
            pos = r7;
          }
          if (r6 !== null) {
            r7 = parse_SourceCharacter();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            r7 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "*/") {
              r6 = "*/";
              pos += 2;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            reportFailures--;
            if (r6 === null) {
              r6 = "";
            } else {
              r6 = null;
              pos = r7;
            }
            if (r6 !== null) {
              r7 = parse_SourceCharacter();
              if (r7 !== null) {
                r4 = [r6, r7];
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            if (input.substr(pos, 2) === "*/") {
              r4 = "*/";
              pos += 2;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_MultiLineCommentNoLineTerminator() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        if (input.substr(pos, 2) === "/*") {
          r2 = "/*";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"/*\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          r7 = pos;
          reportFailures++;
          if (input.substr(pos, 2) === "*/") {
            r6 = "*/";
            pos += 2;
          } else {
            r6 = null;
            if (reportFailures === 0) {
              matchFailed("\"*/\"");
            }
          }
          if (r6 === null) {
            r6 = parse_LineTerminator();
          }
          reportFailures--;
          if (r6 === null) {
            r6 = "";
          } else {
            r6 = null;
            pos = r7;
          }
          if (r6 !== null) {
            r7 = parse_SourceCharacter();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            r7 = pos;
            reportFailures++;
            if (input.substr(pos, 2) === "*/") {
              r6 = "*/";
              pos += 2;
            } else {
              r6 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (r6 === null) {
              r6 = parse_LineTerminator();
            }
            reportFailures--;
            if (r6 === null) {
              r6 = "";
            } else {
              r6 = null;
              pos = r7;
            }
            if (r6 !== null) {
              r7 = parse_SourceCharacter();
              if (r7 !== null) {
                r4 = [r6, r7];
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            if (input.substr(pos, 2) === "*/") {
              r4 = "*/";
              pos += 2;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"*/\"");
              }
            }
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_SingleLineComment() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        if (input.substr(pos, 2) === "//") {
          r2 = "//";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"//\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r5 = pos;
          r7 = pos;
          reportFailures++;
          r6 = parse_LineTerminator();
          reportFailures--;
          if (r6 === null) {
            r6 = "";
          } else {
            r6 = null;
            pos = r7;
          }
          if (r6 !== null) {
            r7 = parse_SourceCharacter();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          while (r4 !== null) {
            r3.push(r4);
            r5 = pos;
            r7 = pos;
            reportFailures++;
            r6 = parse_LineTerminator();
            reportFailures--;
            if (r6 === null) {
              r6 = "";
            } else {
              r6 = null;
              pos = r7;
            }
            if (r6 !== null) {
              r7 = parse_SourceCharacter();
              if (r7 !== null) {
                r4 = [r6, r7];
              } else {
                r4 = null;
                pos = r5;
              }
            } else {
              r4 = null;
              pos = r5;
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_Identifier() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        reportFailures++;
        r3 = parse_ReservedWord();
        reportFailures--;
        if (r3 === null) {
          r3 = "";
        } else {
          r3 = null;
          pos = r4;
        }
        if (r3 !== null) {
          r4 = parse_IdentifierName();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(name) { return name; })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_IdentifierName() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        r3 = parse_IdentifierStart();
        if (r3 !== null) {
          r4 = [];
          r5 = parse_IdentifierPart();
          while (r5 !== null) {
            r4.push(r5);
            r5 = parse_IdentifierPart();
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return {
                type: "Identifier",
                name: first + rest.join("")
              };
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("identifier");
        }
        return r0;
      }
      
      function parse_IdentifierStart() {
        var r0, r1, r2, r3, r4;
        
        r0 = parse_UnicodeLetter();
        if (r0 === null) {
          if (input.charCodeAt(pos) === 36) {
            r0 = "$";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"$\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 95) {
              r0 = "_";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"_\"");
              }
            }
            if (r0 === null) {
              r1 = pos;
              r2 = pos;
              if (input.charCodeAt(pos) === 92) {
                r3 = "\\";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\\\\"");
                }
              }
              if (r3 !== null) {
                r4 = parse_UnicodeEscapeSequence();
                if (r4 !== null) {
                  r0 = [r3, r4];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function(sequence) { return sequence; })(r4);
              }
              if (r0 === null) {
                pos = r1;
              }
            }
          }
        }
        return r0;
      }
      
      function parse_IdentifierPart() {
        var r0;
        
        r0 = parse_IdentifierStart();
        if (r0 === null) {
          r0 = parse_UnicodeCombiningMark();
          if (r0 === null) {
            r0 = parse_Nd();
            if (r0 === null) {
              r0 = parse_Pc();
              if (r0 === null) {
                if (input.charCodeAt(pos) === 8204) {
                  r0 = "\u200C";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u200C\"");
                  }
                }
                if (r0 === null) {
                  if (input.charCodeAt(pos) === 8205) {
                    r0 = "\u200D";
                    pos++;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u200D\"");
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_UnicodeLetter() {
        var r0;
        
        r0 = parse_Lu();
        if (r0 === null) {
          r0 = parse_Ll();
          if (r0 === null) {
            r0 = parse_Lt();
            if (r0 === null) {
              r0 = parse_Lm();
              if (r0 === null) {
                r0 = parse_Lo();
                if (r0 === null) {
                  r0 = parse_Nl();
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_UnicodeCombiningMark() {
        var r0;
        
        r0 = parse_Mn();
        if (r0 === null) {
          r0 = parse_Mc();
        }
        return r0;
      }
      
      function parse_ReservedWord() {
        var r0;
        
        r0 = parse_Keyword();
        if (r0 === null) {
          r0 = parse_FutureReservedWord();
          if (r0 === null) {
            r0 = parse_NullLiteral();
            if (r0 === null) {
              r0 = parse_BooleanLiteral();
            }
          }
        }
        return r0;
      }
      
      function parse_Keyword() {
        var r0;
        
        r0 = parse_BreakToken();
        if (r0 === null) {
          r0 = parse_CaseToken();
          if (r0 === null) {
            r0 = parse_CatchToken();
            if (r0 === null) {
              r0 = parse_ContinueToken();
              if (r0 === null) {
                r0 = parse_DebuggerToken();
                if (r0 === null) {
                  r0 = parse_DefaultToken();
                  if (r0 === null) {
                    r0 = parse_DeleteToken();
                    if (r0 === null) {
                      r0 = parse_DoToken();
                      if (r0 === null) {
                        r0 = parse_ElseToken();
                        if (r0 === null) {
                          r0 = parse_FinallyToken();
                          if (r0 === null) {
                            r0 = parse_ForToken();
                            if (r0 === null) {
                              r0 = parse_FunctionToken();
                              if (r0 === null) {
                                r0 = parse_IfToken();
                                if (r0 === null) {
                                  r0 = parse_InstanceofToken();
                                  if (r0 === null) {
                                    r0 = parse_InToken();
                                    if (r0 === null) {
                                      r0 = parse_NewToken();
                                      if (r0 === null) {
                                        r0 = parse_ReturnToken();
                                        if (r0 === null) {
                                          r0 = parse_SwitchToken();
                                          if (r0 === null) {
                                            r0 = parse_ThisToken();
                                            if (r0 === null) {
                                              r0 = parse_ThrowToken();
                                              if (r0 === null) {
                                                r0 = parse_TryToken();
                                                if (r0 === null) {
                                                  r0 = parse_TypeofToken();
                                                  if (r0 === null) {
                                                    r0 = parse_VarToken();
                                                    if (r0 === null) {
                                                      r0 = parse_VoidToken();
                                                      if (r0 === null) {
                                                        r0 = parse_WhileToken();
                                                        if (r0 === null) {
                                                          r0 = parse_WithToken();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_FutureReservedWord() {
        var r0;
        
        r0 = parse_ClassToken();
        if (r0 === null) {
          r0 = parse_ConstToken();
          if (r0 === null) {
            r0 = parse_EnumToken();
            if (r0 === null) {
              r0 = parse_ExportToken();
              if (r0 === null) {
                r0 = parse_ExtendsToken();
                if (r0 === null) {
                  r0 = parse_ImportToken();
                  if (r0 === null) {
                    r0 = parse_SuperToken();
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Literal() {
        var r0;
        
        r0 = parse_NullLiteral();
        if (r0 === null) {
          r0 = parse_BooleanLiteral();
          if (r0 === null) {
            r0 = parse_NumericLiteral();
            if (r0 === null) {
              r0 = parse_StringLiteral();
              if (r0 === null) {
                r0 = parse_RegularExpressionLiteral();
              }
            }
          }
        }
        return r0;
      }
      
      function parse_NullLiteral() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_NullToken();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "Literal", value: null }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BooleanLiteral() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_TrueToken();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "Literal", value: true  }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_FalseToken();
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return { type: "Literal", value: false }; })();
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_NumericLiteral() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        r3 = parse_HexIntegerLiteral();
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          r4 = parse_IdentifierStart();
          if (r4 === null) {
            r4 = parse_DecimalDigit();
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(literal) {
              return literal;
            })(r3);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_DecimalLiteral();
          if (r3 !== null) {
            r5 = pos;
            reportFailures++;
            r4 = parse_IdentifierStart();
            if (r4 === null) {
              r4 = parse_DecimalDigit();
            }
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(literal) {
                return literal;
              })(r3);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("number");
        }
        return r0;
      }
      
      function parse_DecimalLiteral() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_DecimalIntegerLiteral();
        if (r3 !== null) {
          if (input.charCodeAt(pos) === 46) {
            r4 = ".";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r4 !== null) {
            r5 = [];
            r6 = parse_DecimalDigit();
            while (r6 !== null) {
              r5.push(r6);
              r6 = parse_DecimalDigit();
            }
            if (r5 !== null) {
              r6 = parse_ExponentPart();
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
              return { type: "Literal", value: parseFloat(text()) };
            })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 46) {
            r3 = ".";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\".\"");
            }
          }
          if (r3 !== null) {
            r5 = parse_DecimalDigit();
            if (r5 !== null) {
              r4 = [];
              while (r5 !== null) {
                r4.push(r5);
                r5 = parse_DecimalDigit();
              }
            } else {
              r4 = null;
            }
            if (r4 !== null) {
              r5 = parse_ExponentPart();
              r5 = r5 !== null ? r5 : "";
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() {
                return { type: "Literal", value: parseFloat(text()) };
              })();
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse_DecimalIntegerLiteral();
            if (r3 !== null) {
              r4 = parse_ExponentPart();
              r4 = r4 !== null ? r4 : "";
              if (r4 !== null) {
                r0 = [r3, r4];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function() {
                  return { type: "Literal", value: parseFloat(text()) };
                })();
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_DecimalIntegerLiteral() {
        var r0, r1, r2, r3, r4;
        
        if (input.charCodeAt(pos) === 48) {
          r0 = "0";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"0\"");
          }
        }
        if (r0 === null) {
          r1 = pos;
          r2 = parse_NonZeroDigit();
          if (r2 !== null) {
            r3 = [];
            r4 = parse_DecimalDigit();
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_DecimalDigit();
            }
            if (r3 !== null) {
              r0 = [r2, r3];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_DecimalDigit() {
        var r0;
        
        if (/^[0-9]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9]");
          }
        }
        return r0;
      }
      
      function parse_NonZeroDigit() {
        var r0;
        
        if (/^[1-9]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[1-9]");
          }
        }
        return r0;
      }
      
      function parse_ExponentPart() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r2 = parse_ExponentIndicator();
        if (r2 !== null) {
          r3 = parse_SignedInteger();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExponentIndicator() {
        var r0;
        
        if (input.substr(pos, 1).toLowerCase() === "e") {
          r0 = input.substr(pos, 1);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"e\"");
          }
        }
        return r0;
      }
      
      function parse_SignedInteger() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (/^[+\-]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[+\\-]");
          }
        }
        r2 = r2 !== null ? r2 : "";
        if (r2 !== null) {
          r4 = parse_DecimalDigit();
          if (r4 !== null) {
            r3 = [];
            while (r4 !== null) {
              r3.push(r4);
              r4 = parse_DecimalDigit();
            }
          } else {
            r3 = null;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_HexIntegerLiteral() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 2).toLowerCase() === "0x") {
          r3 = input.substr(pos, 2);
          pos += 2;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"0x\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = parse_HexDigit();
          if (r6 !== null) {
            r4 = [];
            while (r6 !== null) {
              r4.push(r6);
              r6 = parse_HexDigit();
            }
          } else {
            r4 = null;
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(digits) {
              return { type: "Literal", value: parseInt(digits, 16) };
             })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_HexDigit() {
        var r0;
        
        if (/^[0-9a-f]/i.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9a-f]i");
          }
        }
        return r0;
      }
      
      function parse_StringLiteral() {
        var r0, r1, r2, r3, r4, r5;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 34) {
          r3 = "\"";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (r3 !== null) {
          r4 = [];
          r5 = parse_DoubleStringCharacter();
          while (r5 !== null) {
            r4.push(r5);
            r5 = parse_DoubleStringCharacter();
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 34) {
              r5 = "\"";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(chars) {
              return { type: "Literal", value: chars.join("") };
            })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 39) {
            r3 = "'";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"'\"");
            }
          }
          if (r3 !== null) {
            r4 = [];
            r5 = parse_SingleStringCharacter();
            while (r5 !== null) {
              r4.push(r5);
              r5 = parse_SingleStringCharacter();
            }
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 39) {
                r5 = "'";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"'\"");
                }
              }
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(chars) {
                return { type: "Literal", value: chars.join("") };
              })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("string");
        }
        return r0;
      }
      
      function parse_DoubleStringCharacter() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 34) {
          r3 = "\"";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (r3 === null) {
          if (input.charCodeAt(pos) === 92) {
            r3 = "\\";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (r3 === null) {
            r3 = parse_LineTerminator();
          }
        }
        reportFailures--;
        if (r3 === null) {
          r3 = "";
        } else {
          r3 = null;
          pos = r4;
        }
        if (r3 !== null) {
          r4 = parse_SourceCharacter();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return text(); })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 92) {
            r3 = "\\";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (r3 !== null) {
            r4 = parse_EscapeSequence();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(sequence) { return sequence; })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r0 = parse_LineContinuation();
          }
        }
        return r0;
      }
      
      function parse_SingleStringCharacter() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 39) {
          r3 = "'";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (r3 === null) {
          if (input.charCodeAt(pos) === 92) {
            r3 = "\\";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (r3 === null) {
            r3 = parse_LineTerminator();
          }
        }
        reportFailures--;
        if (r3 === null) {
          r3 = "";
        } else {
          r3 = null;
          pos = r4;
        }
        if (r3 !== null) {
          r4 = parse_SourceCharacter();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return text(); })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 92) {
            r3 = "\\";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\\\"");
            }
          }
          if (r3 !== null) {
            r4 = parse_EscapeSequence();
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(sequence) { return sequence; })(r4);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r0 = parse_LineContinuation();
          }
        }
        return r0;
      }
      
      function parse_LineContinuation() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 92) {
          r3 = "\\";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (r3 !== null) {
          r4 = parse_LineTerminatorSequence();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return ""; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_EscapeSequence() {
        var r0, r1, r2, r3, r4, r5;
        
        r0 = parse_CharacterEscapeSequence();
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 48) {
            r3 = "0";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"0\"");
            }
          }
          if (r3 !== null) {
            r5 = pos;
            reportFailures++;
            r4 = parse_DecimalDigit();
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function() { return "\0"; })();
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r0 = parse_HexEscapeSequence();
            if (r0 === null) {
              r0 = parse_UnicodeEscapeSequence();
            }
          }
        }
        return r0;
      }
      
      function parse_CharacterEscapeSequence() {
        var r0;
        
        r0 = parse_SingleEscapeCharacter();
        if (r0 === null) {
          r0 = parse_NonEscapeCharacter();
        }
        return r0;
      }
      
      function parse_SingleEscapeCharacter() {
        var r0, r1;
        
        if (input.charCodeAt(pos) === 39) {
          r0 = "'";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"'\"");
          }
        }
        if (r0 === null) {
          if (input.charCodeAt(pos) === 34) {
            r0 = "\"";
            pos++;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\\"\"");
            }
          }
          if (r0 === null) {
            if (input.charCodeAt(pos) === 92) {
              r0 = "\\";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\\\"");
              }
            }
            if (r0 === null) {
              r1 = pos;
              if (input.charCodeAt(pos) === 98) {
                r0 = "b";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"b\"");
                }
              }
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function() { return "\b";   })();
              }
              if (r0 === null) {
                pos = r1;
              }
              if (r0 === null) {
                r1 = pos;
                if (input.charCodeAt(pos) === 102) {
                  r0 = "f";
                  pos++;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"f\"");
                  }
                }
                if (r0 !== null) {
                  reportedPos = r1;
                  r0 = (function() { return "\f";   })();
                }
                if (r0 === null) {
                  pos = r1;
                }
                if (r0 === null) {
                  r1 = pos;
                  if (input.charCodeAt(pos) === 110) {
                    r0 = "n";
                    pos++;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"n\"");
                    }
                  }
                  if (r0 !== null) {
                    reportedPos = r1;
                    r0 = (function() { return "\n";   })();
                  }
                  if (r0 === null) {
                    pos = r1;
                  }
                  if (r0 === null) {
                    r1 = pos;
                    if (input.charCodeAt(pos) === 114) {
                      r0 = "r";
                      pos++;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"r\"");
                      }
                    }
                    if (r0 !== null) {
                      reportedPos = r1;
                      r0 = (function() { return "\r";   })();
                    }
                    if (r0 === null) {
                      pos = r1;
                    }
                    if (r0 === null) {
                      r1 = pos;
                      if (input.charCodeAt(pos) === 116) {
                        r0 = "t";
                        pos++;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"t\"");
                        }
                      }
                      if (r0 !== null) {
                        reportedPos = r1;
                        r0 = (function() { return "\t";   })();
                      }
                      if (r0 === null) {
                        pos = r1;
                      }
                      if (r0 === null) {
                        r1 = pos;
                        if (input.charCodeAt(pos) === 118) {
                          r0 = "v";
                          pos++;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"v\"");
                          }
                        }
                        if (r0 !== null) {
                          reportedPos = r1;
                          r0 = (function() { return "\x0B"; })();
                        }
                        if (r0 === null) {
                          pos = r1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_NonEscapeCharacter() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        reportFailures++;
        r3 = parse_EscapeCharacter();
        if (r3 === null) {
          r3 = parse_LineTerminator();
        }
        reportFailures--;
        if (r3 === null) {
          r3 = "";
        } else {
          r3 = null;
          pos = r4;
        }
        if (r3 !== null) {
          r4 = parse_SourceCharacter();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return text(); })();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_EscapeCharacter() {
        var r0;
        
        r0 = parse_SingleEscapeCharacter();
        if (r0 === null) {
          r0 = parse_DecimalDigit();
          if (r0 === null) {
            if (input.charCodeAt(pos) === 120) {
              r0 = "x";
              pos++;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"x\"");
              }
            }
            if (r0 === null) {
              if (input.charCodeAt(pos) === 117) {
                r0 = "u";
                pos++;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"u\"");
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_HexEscapeSequence() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 120) {
          r3 = "x";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"x\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          r7 = parse_HexDigit();
          if (r7 !== null) {
            r8 = parse_HexDigit();
            if (r8 !== null) {
              r4 = [r7, r8];
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_UnicodeEscapeSequence() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 117) {
          r3 = "u";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"u\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r6 = pos;
          r7 = parse_HexDigit();
          if (r7 !== null) {
            r8 = parse_HexDigit();
            if (r8 !== null) {
              r9 = parse_HexDigit();
              if (r9 !== null) {
                r10 = parse_HexDigit();
                if (r10 !== null) {
                  r4 = [r7, r8, r9, r10];
                } else {
                  r4 = null;
                  pos = r6;
                }
              } else {
                r4 = null;
                pos = r6;
              }
            } else {
              r4 = null;
              pos = r6;
            }
          } else {
            r4 = null;
            pos = r6;
          }
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_RegularExpressionLiteral() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        reportFailures++;
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 47) {
          r3 = "/";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"/\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          r4 = parse_RegularExpressionBody();
          if (r4 !== null) {
            r4 = input.substring(pos, r5);
          }
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 47) {
              r5 = "/";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"/\"");
              }
            }
            if (r5 !== null) {
              r7 = pos;
              r6 = parse_RegularExpressionFlags();
              if (r6 !== null) {
                r6 = input.substring(pos, r7);
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(pattern, flags) {
              var value;
        
              try {
                value = new RegExp(pattern, flags);
              } catch (e) {
                error(e.message);
              }
        
              return { type: "Literal", value: value };
            })(r4, r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        reportFailures--;
        if (reportFailures === 0 && r0 === null) {
          matchFailed("regular expression");
        }
        return r0;
      }
      
      function parse_RegularExpressionBody() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse_RegularExpressionFirstChar();
        if (r2 !== null) {
          r3 = [];
          r4 = parse_RegularExpressionChar();
          while (r4 !== null) {
            r3.push(r4);
            r4 = parse_RegularExpressionChar();
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_RegularExpressionFirstChar() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r3 = pos;
        reportFailures++;
        if (/^[*\\\/[]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[*\\\\\\/[]");
          }
        }
        reportFailures--;
        if (r2 === null) {
          r2 = "";
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 !== null) {
          r3 = parse_RegularExpressionNonTerminator();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_RegularExpressionBackslashSequence();
          if (r0 === null) {
            r0 = parse_RegularExpressionClass();
          }
        }
        return r0;
      }
      
      function parse_RegularExpressionChar() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r3 = pos;
        reportFailures++;
        if (/^[\\\/[]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[\\\\\\/[]");
          }
        }
        reportFailures--;
        if (r2 === null) {
          r2 = "";
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 !== null) {
          r3 = parse_RegularExpressionNonTerminator();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_RegularExpressionBackslashSequence();
          if (r0 === null) {
            r0 = parse_RegularExpressionClass();
          }
        }
        return r0;
      }
      
      function parse_RegularExpressionBackslashSequence() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 92) {
          r2 = "\\";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\\\"");
          }
        }
        if (r2 !== null) {
          r3 = parse_RegularExpressionNonTerminator();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_RegularExpressionNonTerminator() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r3 = pos;
        reportFailures++;
        r2 = parse_LineTerminator();
        reportFailures--;
        if (r2 === null) {
          r2 = "";
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 !== null) {
          r3 = parse_SourceCharacter();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_RegularExpressionClass() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 91) {
          r2 = "[";
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (r2 !== null) {
          r3 = [];
          r4 = parse_RegularExpressionClassChar();
          while (r4 !== null) {
            r3.push(r4);
            r4 = parse_RegularExpressionClassChar();
          }
          if (r3 !== null) {
            if (input.charCodeAt(pos) === 93) {
              r4 = "]";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"]\"");
              }
            }
            if (r4 !== null) {
              r0 = [r2, r3, r4];
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_RegularExpressionClassChar() {
        var r0, r1, r2, r3;
        
        r1 = pos;
        r3 = pos;
        reportFailures++;
        if (/^[\]\\]/.test(input.charAt(pos))) {
          r2 = input.charAt(pos);
          pos++;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("[\\]\\\\]");
          }
        }
        reportFailures--;
        if (r2 === null) {
          r2 = "";
        } else {
          r2 = null;
          pos = r3;
        }
        if (r2 !== null) {
          r3 = parse_RegularExpressionNonTerminator();
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_RegularExpressionBackslashSequence();
        }
        return r0;
      }
      
      function parse_RegularExpressionFlags() {
        var r0, r1;
        
        r0 = [];
        r1 = parse_IdentifierPart();
        while (r1 !== null) {
          r0.push(r1);
          r1 = parse_IdentifierPart();
        }
        return r0;
      }
      
      function parse_Ll() {
        var r0;
        
        if (/^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0561-\u0587\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7FA\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[a-z\\xB5\\xDF-\\xF6\\xF8-\\xFF\\u0101\\u0103\\u0105\\u0107\\u0109\\u010B\\u010D\\u010F\\u0111\\u0113\\u0115\\u0117\\u0119\\u011B\\u011D\\u011F\\u0121\\u0123\\u0125\\u0127\\u0129\\u012B\\u012D\\u012F\\u0131\\u0133\\u0135\\u0137-\\u0138\\u013A\\u013C\\u013E\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014B\\u014D\\u014F\\u0151\\u0153\\u0155\\u0157\\u0159\\u015B\\u015D\\u015F\\u0161\\u0163\\u0165\\u0167\\u0169\\u016B\\u016D\\u016F\\u0171\\u0173\\u0175\\u0177\\u017A\\u017C\\u017E-\\u0180\\u0183\\u0185\\u0188\\u018C-\\u018D\\u0192\\u0195\\u0199-\\u019B\\u019E\\u01A1\\u01A3\\u01A5\\u01A8\\u01AA-\\u01AB\\u01AD\\u01B0\\u01B4\\u01B6\\u01B9-\\u01BA\\u01BD-\\u01BF\\u01C6\\u01C9\\u01CC\\u01CE\\u01D0\\u01D2\\u01D4\\u01D6\\u01D8\\u01DA\\u01DC-\\u01DD\\u01DF\\u01E1\\u01E3\\u01E5\\u01E7\\u01E9\\u01EB\\u01ED\\u01EF-\\u01F0\\u01F3\\u01F5\\u01F9\\u01FB\\u01FD\\u01FF\\u0201\\u0203\\u0205\\u0207\\u0209\\u020B\\u020D\\u020F\\u0211\\u0213\\u0215\\u0217\\u0219\\u021B\\u021D\\u021F\\u0221\\u0223\\u0225\\u0227\\u0229\\u022B\\u022D\\u022F\\u0231\\u0233-\\u0239\\u023C\\u023F-\\u0240\\u0242\\u0247\\u0249\\u024B\\u024D\\u024F-\\u0293\\u0295-\\u02AF\\u0371\\u0373\\u0377\\u037B-\\u037D\\u0390\\u03AC-\\u03CE\\u03D0-\\u03D1\\u03D5-\\u03D7\\u03D9\\u03DB\\u03DD\\u03DF\\u03E1\\u03E3\\u03E5\\u03E7\\u03E9\\u03EB\\u03ED\\u03EF-\\u03F3\\u03F5\\u03F8\\u03FB-\\u03FC\\u0430-\\u045F\\u0461\\u0463\\u0465\\u0467\\u0469\\u046B\\u046D\\u046F\\u0471\\u0473\\u0475\\u0477\\u0479\\u047B\\u047D\\u047F\\u0481\\u048B\\u048D\\u048F\\u0491\\u0493\\u0495\\u0497\\u0499\\u049B\\u049D\\u049F\\u04A1\\u04A3\\u04A5\\u04A7\\u04A9\\u04AB\\u04AD\\u04AF\\u04B1\\u04B3\\u04B5\\u04B7\\u04B9\\u04BB\\u04BD\\u04BF\\u04C2\\u04C4\\u04C6\\u04C8\\u04CA\\u04CC\\u04CE-\\u04CF\\u04D1\\u04D3\\u04D5\\u04D7\\u04D9\\u04DB\\u04DD\\u04DF\\u04E1\\u04E3\\u04E5\\u04E7\\u04E9\\u04EB\\u04ED\\u04EF\\u04F1\\u04F3\\u04F5\\u04F7\\u04F9\\u04FB\\u04FD\\u04FF\\u0501\\u0503\\u0505\\u0507\\u0509\\u050B\\u050D\\u050F\\u0511\\u0513\\u0515\\u0517\\u0519\\u051B\\u051D\\u051F\\u0521\\u0523\\u0525\\u0527\\u0561-\\u0587\\u1D00-\\u1D2B\\u1D6B-\\u1D77\\u1D79-\\u1D9A\\u1E01\\u1E03\\u1E05\\u1E07\\u1E09\\u1E0B\\u1E0D\\u1E0F\\u1E11\\u1E13\\u1E15\\u1E17\\u1E19\\u1E1B\\u1E1D\\u1E1F\\u1E21\\u1E23\\u1E25\\u1E27\\u1E29\\u1E2B\\u1E2D\\u1E2F\\u1E31\\u1E33\\u1E35\\u1E37\\u1E39\\u1E3B\\u1E3D\\u1E3F\\u1E41\\u1E43\\u1E45\\u1E47\\u1E49\\u1E4B\\u1E4D\\u1E4F\\u1E51\\u1E53\\u1E55\\u1E57\\u1E59\\u1E5B\\u1E5D\\u1E5F\\u1E61\\u1E63\\u1E65\\u1E67\\u1E69\\u1E6B\\u1E6D\\u1E6F\\u1E71\\u1E73\\u1E75\\u1E77\\u1E79\\u1E7B\\u1E7D\\u1E7F\\u1E81\\u1E83\\u1E85\\u1E87\\u1E89\\u1E8B\\u1E8D\\u1E8F\\u1E91\\u1E93\\u1E95-\\u1E9D\\u1E9F\\u1EA1\\u1EA3\\u1EA5\\u1EA7\\u1EA9\\u1EAB\\u1EAD\\u1EAF\\u1EB1\\u1EB3\\u1EB5\\u1EB7\\u1EB9\\u1EBB\\u1EBD\\u1EBF\\u1EC1\\u1EC3\\u1EC5\\u1EC7\\u1EC9\\u1ECB\\u1ECD\\u1ECF\\u1ED1\\u1ED3\\u1ED5\\u1ED7\\u1ED9\\u1EDB\\u1EDD\\u1EDF\\u1EE1\\u1EE3\\u1EE5\\u1EE7\\u1EE9\\u1EEB\\u1EED\\u1EEF\\u1EF1\\u1EF3\\u1EF5\\u1EF7\\u1EF9\\u1EFB\\u1EFD\\u1EFF-\\u1F07\\u1F10-\\u1F15\\u1F20-\\u1F27\\u1F30-\\u1F37\\u1F40-\\u1F45\\u1F50-\\u1F57\\u1F60-\\u1F67\\u1F70-\\u1F7D\\u1F80-\\u1F87\\u1F90-\\u1F97\\u1FA0-\\u1FA7\\u1FB0-\\u1FB4\\u1FB6-\\u1FB7\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FC7\\u1FD0-\\u1FD3\\u1FD6-\\u1FD7\\u1FE0-\\u1FE7\\u1FF2-\\u1FF4\\u1FF6-\\u1FF7\\u210A\\u210E-\\u210F\\u2113\\u212F\\u2134\\u2139\\u213C-\\u213D\\u2146-\\u2149\\u214E\\u2184\\u2C30-\\u2C5E\\u2C61\\u2C65-\\u2C66\\u2C68\\u2C6A\\u2C6C\\u2C71\\u2C73-\\u2C74\\u2C76-\\u2C7B\\u2C81\\u2C83\\u2C85\\u2C87\\u2C89\\u2C8B\\u2C8D\\u2C8F\\u2C91\\u2C93\\u2C95\\u2C97\\u2C99\\u2C9B\\u2C9D\\u2C9F\\u2CA1\\u2CA3\\u2CA5\\u2CA7\\u2CA9\\u2CAB\\u2CAD\\u2CAF\\u2CB1\\u2CB3\\u2CB5\\u2CB7\\u2CB9\\u2CBB\\u2CBD\\u2CBF\\u2CC1\\u2CC3\\u2CC5\\u2CC7\\u2CC9\\u2CCB\\u2CCD\\u2CCF\\u2CD1\\u2CD3\\u2CD5\\u2CD7\\u2CD9\\u2CDB\\u2CDD\\u2CDF\\u2CE1\\u2CE3-\\u2CE4\\u2CEC\\u2CEE\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\uA641\\uA643\\uA645\\uA647\\uA649\\uA64B\\uA64D\\uA64F\\uA651\\uA653\\uA655\\uA657\\uA659\\uA65B\\uA65D\\uA65F\\uA661\\uA663\\uA665\\uA667\\uA669\\uA66B\\uA66D\\uA681\\uA683\\uA685\\uA687\\uA689\\uA68B\\uA68D\\uA68F\\uA691\\uA693\\uA695\\uA697\\uA723\\uA725\\uA727\\uA729\\uA72B\\uA72D\\uA72F-\\uA731\\uA733\\uA735\\uA737\\uA739\\uA73B\\uA73D\\uA73F\\uA741\\uA743\\uA745\\uA747\\uA749\\uA74B\\uA74D\\uA74F\\uA751\\uA753\\uA755\\uA757\\uA759\\uA75B\\uA75D\\uA75F\\uA761\\uA763\\uA765\\uA767\\uA769\\uA76B\\uA76D\\uA76F\\uA771-\\uA778\\uA77A\\uA77C\\uA77F\\uA781\\uA783\\uA785\\uA787\\uA78C\\uA78E\\uA791\\uA793\\uA7A1\\uA7A3\\uA7A5\\uA7A7\\uA7A9\\uA7FA\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFF41-\\uFF5A]");
          }
        }
        return r0;
      }
      
      function parse_Lm() {
        var r0;
        
        if (/^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uAA70\uAADD\uAAF3-\uAAF4\uFF70\uFF9E-\uFF9F]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u02B0-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0374\\u037A\\u0559\\u0640\\u06E5-\\u06E6\\u07F4-\\u07F5\\u07FA\\u081A\\u0824\\u0828\\u0971\\u0E46\\u0EC6\\u10FC\\u17D7\\u1843\\u1AA7\\u1C78-\\u1C7D\\u1D2C-\\u1D6A\\u1D78\\u1D9B-\\u1DBF\\u2071\\u207F\\u2090-\\u209C\\u2C7C-\\u2C7D\\u2D6F\\u2E2F\\u3005\\u3031-\\u3035\\u303B\\u309D-\\u309E\\u30FC-\\u30FE\\uA015\\uA4F8-\\uA4FD\\uA60C\\uA67F\\uA717-\\uA71F\\uA770\\uA788\\uA7F8-\\uA7F9\\uA9CF\\uAA70\\uAADD\\uAAF3-\\uAAF4\\uFF70\\uFF9E-\\uFF9F]");
          }
        }
        return r0;
      }
      
      function parse_Lo() {
        var r0;
        
        if (/^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0977\u0979-\u097F\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58-\u0C59\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\xAA\\xBA\\u01BB\\u01C0-\\u01C3\\u0294\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u063F\\u0641-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u0800-\\u0815\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0972-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58-\\u0C59\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E45\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10D0-\\u10FA\\u10FD-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17DC\\u1820-\\u1842\\u1844-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C77\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5-\\u1CF6\\u2135-\\u2138\\u2D30-\\u2D67\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3006\\u303C\\u3041-\\u3096\\u309F\\u30A1-\\u30FA\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA014\\uA016-\\uA48C\\uA4D0-\\uA4F7\\uA500-\\uA60B\\uA610-\\uA61F\\uA62A-\\uA62B\\uA66E\\uA6A0-\\uA6E5\\uA7FB-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA6F\\uAA71-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADC\\uAAE0-\\uAAEA\\uAAF2\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF66-\\uFF6F\\uFF71-\\uFF9D\\uFFA0-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]");
          }
        }
        return r0;
      }
      
      function parse_Lt() {
        var r0;
        
        if (/^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u01C5\\u01C8\\u01CB\\u01F2\\u1F88-\\u1F8F\\u1F98-\\u1F9F\\u1FA8-\\u1FAF\\u1FBC\\u1FCC\\u1FFC]");
          }
        }
        return r0;
      }
      
      function parse_Lu() {
        var r0;
        
        if (/^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA\uFF21-\uFF3A]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[A-Z\\xC0-\\xD6\\xD8-\\xDE\\u0100\\u0102\\u0104\\u0106\\u0108\\u010A\\u010C\\u010E\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\u011C\\u011E\\u0120\\u0122\\u0124\\u0126\\u0128\\u012A\\u012C\\u012E\\u0130\\u0132\\u0134\\u0136\\u0139\\u013B\\u013D\\u013F\\u0141\\u0143\\u0145\\u0147\\u014A\\u014C\\u014E\\u0150\\u0152\\u0154\\u0156\\u0158\\u015A\\u015C\\u015E\\u0160\\u0162\\u0164\\u0166\\u0168\\u016A\\u016C\\u016E\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017B\\u017D\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018B\\u018E-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019C-\\u019D\\u019F-\\u01A0\\u01A2\\u01A4\\u01A6-\\u01A7\\u01A9\\u01AC\\u01AE-\\u01AF\\u01B1-\\u01B3\\u01B5\\u01B7-\\u01B8\\u01BC\\u01C4\\u01C7\\u01CA\\u01CD\\u01CF\\u01D1\\u01D3\\u01D5\\u01D7\\u01D9\\u01DB\\u01DE\\u01E0\\u01E2\\u01E4\\u01E6\\u01E8\\u01EA\\u01EC\\u01EE\\u01F1\\u01F4\\u01F6-\\u01F8\\u01FA\\u01FC\\u01FE\\u0200\\u0202\\u0204\\u0206\\u0208\\u020A\\u020C\\u020E\\u0210\\u0212\\u0214\\u0216\\u0218\\u021A\\u021C\\u021E\\u0220\\u0222\\u0224\\u0226\\u0228\\u022A\\u022C\\u022E\\u0230\\u0232\\u023A-\\u023B\\u023D-\\u023E\\u0241\\u0243-\\u0246\\u0248\\u024A\\u024C\\u024E\\u0370\\u0372\\u0376\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u038F\\u0391-\\u03A1\\u03A3-\\u03AB\\u03CF\\u03D2-\\u03D4\\u03D8\\u03DA\\u03DC\\u03DE\\u03E0\\u03E2\\u03E4\\u03E6\\u03E8\\u03EA\\u03EC\\u03EE\\u03F4\\u03F7\\u03F9-\\u03FA\\u03FD-\\u042F\\u0460\\u0462\\u0464\\u0466\\u0468\\u046A\\u046C\\u046E\\u0470\\u0472\\u0474\\u0476\\u0478\\u047A\\u047C\\u047E\\u0480\\u048A\\u048C\\u048E\\u0490\\u0492\\u0494\\u0496\\u0498\\u049A\\u049C\\u049E\\u04A0\\u04A2\\u04A4\\u04A6\\u04A8\\u04AA\\u04AC\\u04AE\\u04B0\\u04B2\\u04B4\\u04B6\\u04B8\\u04BA\\u04BC\\u04BE\\u04C0-\\u04C1\\u04C3\\u04C5\\u04C7\\u04C9\\u04CB\\u04CD\\u04D0\\u04D2\\u04D4\\u04D6\\u04D8\\u04DA\\u04DC\\u04DE\\u04E0\\u04E2\\u04E4\\u04E6\\u04E8\\u04EA\\u04EC\\u04EE\\u04F0\\u04F2\\u04F4\\u04F6\\u04F8\\u04FA\\u04FC\\u04FE\\u0500\\u0502\\u0504\\u0506\\u0508\\u050A\\u050C\\u050E\\u0510\\u0512\\u0514\\u0516\\u0518\\u051A\\u051C\\u051E\\u0520\\u0522\\u0524\\u0526\\u0531-\\u0556\\u10A0-\\u10C5\\u10C7\\u10CD\\u1E00\\u1E02\\u1E04\\u1E06\\u1E08\\u1E0A\\u1E0C\\u1E0E\\u1E10\\u1E12\\u1E14\\u1E16\\u1E18\\u1E1A\\u1E1C\\u1E1E\\u1E20\\u1E22\\u1E24\\u1E26\\u1E28\\u1E2A\\u1E2C\\u1E2E\\u1E30\\u1E32\\u1E34\\u1E36\\u1E38\\u1E3A\\u1E3C\\u1E3E\\u1E40\\u1E42\\u1E44\\u1E46\\u1E48\\u1E4A\\u1E4C\\u1E4E\\u1E50\\u1E52\\u1E54\\u1E56\\u1E58\\u1E5A\\u1E5C\\u1E5E\\u1E60\\u1E62\\u1E64\\u1E66\\u1E68\\u1E6A\\u1E6C\\u1E6E\\u1E70\\u1E72\\u1E74\\u1E76\\u1E78\\u1E7A\\u1E7C\\u1E7E\\u1E80\\u1E82\\u1E84\\u1E86\\u1E88\\u1E8A\\u1E8C\\u1E8E\\u1E90\\u1E92\\u1E94\\u1E9E\\u1EA0\\u1EA2\\u1EA4\\u1EA6\\u1EA8\\u1EAA\\u1EAC\\u1EAE\\u1EB0\\u1EB2\\u1EB4\\u1EB6\\u1EB8\\u1EBA\\u1EBC\\u1EBE\\u1EC0\\u1EC2\\u1EC4\\u1EC6\\u1EC8\\u1ECA\\u1ECC\\u1ECE\\u1ED0\\u1ED2\\u1ED4\\u1ED6\\u1ED8\\u1EDA\\u1EDC\\u1EDE\\u1EE0\\u1EE2\\u1EE4\\u1EE6\\u1EE8\\u1EEA\\u1EEC\\u1EEE\\u1EF0\\u1EF2\\u1EF4\\u1EF6\\u1EF8\\u1EFA\\u1EFC\\u1EFE\\u1F08-\\u1F0F\\u1F18-\\u1F1D\\u1F28-\\u1F2F\\u1F38-\\u1F3F\\u1F48-\\u1F4D\\u1F59\\u1F5B\\u1F5D\\u1F5F\\u1F68-\\u1F6F\\u1FB8-\\u1FBB\\u1FC8-\\u1FCB\\u1FD8-\\u1FDB\\u1FE8-\\u1FEC\\u1FF8-\\u1FFB\\u2102\\u2107\\u210B-\\u210D\\u2110-\\u2112\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u2130-\\u2133\\u213E-\\u213F\\u2145\\u2183\\u2C00-\\u2C2E\\u2C60\\u2C62-\\u2C64\\u2C67\\u2C69\\u2C6B\\u2C6D-\\u2C70\\u2C72\\u2C75\\u2C7E-\\u2C80\\u2C82\\u2C84\\u2C86\\u2C88\\u2C8A\\u2C8C\\u2C8E\\u2C90\\u2C92\\u2C94\\u2C96\\u2C98\\u2C9A\\u2C9C\\u2C9E\\u2CA0\\u2CA2\\u2CA4\\u2CA6\\u2CA8\\u2CAA\\u2CAC\\u2CAE\\u2CB0\\u2CB2\\u2CB4\\u2CB6\\u2CB8\\u2CBA\\u2CBC\\u2CBE\\u2CC0\\u2CC2\\u2CC4\\u2CC6\\u2CC8\\u2CCA\\u2CCC\\u2CCE\\u2CD0\\u2CD2\\u2CD4\\u2CD6\\u2CD8\\u2CDA\\u2CDC\\u2CDE\\u2CE0\\u2CE2\\u2CEB\\u2CED\\u2CF2\\uA640\\uA642\\uA644\\uA646\\uA648\\uA64A\\uA64C\\uA64E\\uA650\\uA652\\uA654\\uA656\\uA658\\uA65A\\uA65C\\uA65E\\uA660\\uA662\\uA664\\uA666\\uA668\\uA66A\\uA66C\\uA680\\uA682\\uA684\\uA686\\uA688\\uA68A\\uA68C\\uA68E\\uA690\\uA692\\uA694\\uA696\\uA722\\uA724\\uA726\\uA728\\uA72A\\uA72C\\uA72E\\uA732\\uA734\\uA736\\uA738\\uA73A\\uA73C\\uA73E\\uA740\\uA742\\uA744\\uA746\\uA748\\uA74A\\uA74C\\uA74E\\uA750\\uA752\\uA754\\uA756\\uA758\\uA75A\\uA75C\\uA75E\\uA760\\uA762\\uA764\\uA766\\uA768\\uA76A\\uA76C\\uA76E\\uA779\\uA77B\\uA77D-\\uA77E\\uA780\\uA782\\uA784\\uA786\\uA78B\\uA78D\\uA790\\uA792\\uA7A0\\uA7A2\\uA7A4\\uA7A6\\uA7A8\\uA7AA\\uFF21-\\uFF3A]");
          }
        }
        return r0;
      }
      
      function parse_Mc() {
        var r0;
        
        if (/^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u19B0-\u19C0\u19C8-\u19C9\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BAC-\u1BAD\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BE-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u09D7\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B3E\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0B57\\u0BBE-\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0BD7\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0CD5-\\u0CD6\\u0D02-\\u0D03\\u0D3E-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D57\\u0D82-\\u0D83\\u0DCF-\\u0DD1\\u0DD8-\\u0DDF\\u0DF2-\\u0DF3\\u0F3E-\\u0F3F\\u0F7F\\u102B-\\u102C\\u1031\\u1038\\u103B-\\u103C\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106D\\u1083-\\u1084\\u1087-\\u108C\\u108F\\u109A-\\u109C\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u19B0-\\u19C0\\u19C8-\\u19C9\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A61\\u1A63-\\u1A64\\u1A6D-\\u1A72\\u1B04\\u1B35\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BAC-\\u1BAD\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF2-\\u1CF3\\u302E-\\u302F\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BD-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAA7B\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC]");
          }
        }
        return r0;
      }
      
      function parse_Mn() {
        var r0;
        
        if (/^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u08FE\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1-\\u05C2\\u05C4-\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7-\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2-\\u09E3\\u0A01-\\u0A02\\u0A3C\\u0A41-\\u0A42\\u0A47-\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70-\\u0A71\\u0A75\\u0A81-\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7-\\u0AC8\\u0ACD\\u0AE2-\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62-\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55-\\u0C56\\u0C62-\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC-\\u0CCD\\u0CE2-\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62-\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB-\\u0EBC\\u0EC8-\\u0ECD\\u0F18-\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86-\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039-\\u103A\\u103D-\\u103E\\u1058-\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17B4-\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927-\\u1928\\u1932\\u1939-\\u193B\\u1A17-\\u1A18\\u1A1B\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80-\\u1B81\\u1BA2-\\u1BA5\\u1BA8-\\u1BA9\\u1BAB\\u1BE6\\u1BE8-\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36-\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099-\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0-\\uA6F1\\uA802\\uA806\\uA80B\\uA825-\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31-\\uAA32\\uAA35-\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7-\\uAAB8\\uAABE-\\uAABF\\uAAC1\\uAAEC-\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26]");
          }
        }
        return r0;
      }
      
      function parse_Nd() {
        var r0;
        
        if (/^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[0-9\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19]");
          }
        }
        return r0;
      }
      
      function parse_Nl() {
        var r0;
        
        if (/^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[\\u16EE-\\u16F0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303A\\uA6E6-\\uA6EF]");
          }
        }
        return r0;
      }
      
      function parse_Pc() {
        var r0;
        
        if (/^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[_\\u203F-\\u2040\\u2054\\uFE33-\\uFE34\\uFE4D-\\uFE4F\\uFF3F]");
          }
        }
        return r0;
      }
      
      function parse_Zs() {
        var r0;
        
        if (/^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\xA0\\u1680\\u2000-\\u200A\\u202F\\u205F\\u3000]");
          }
        }
        return r0;
      }
      
      function parse_BreakToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "break") {
          r2 = "break";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"break\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_CaseToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "case") {
          r2 = "case";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"case\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_CatchToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "catch") {
          r2 = "catch";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"catch\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ClassToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "class") {
          r2 = "class";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"class\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ConstToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "const") {
          r2 = "const";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"const\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ContinueToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 8) === "continue") {
          r2 = "continue";
          pos += 8;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"continue\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_DebuggerToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 8) === "debugger") {
          r2 = "debugger";
          pos += 8;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"debugger\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_DefaultToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 7) === "default") {
          r2 = "default";
          pos += 7;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"default\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_DeleteToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "delete") {
          r2 = "delete";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"delete\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_DoToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 2) === "do") {
          r2 = "do";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"do\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ElseToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "else") {
          r2 = "else";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"else\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_EnumToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "enum") {
          r2 = "enum";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"enum\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExportToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "export") {
          r2 = "export";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"export\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExtendsToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 7) === "extends") {
          r2 = "extends";
          pos += 7;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"extends\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_FalseToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "false") {
          r2 = "false";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"false\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_FinallyToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 7) === "finally") {
          r2 = "finally";
          pos += 7;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"finally\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ForToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "for") {
          r2 = "for";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"for\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_FunctionToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 8) === "function") {
          r2 = "function";
          pos += 8;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"function\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_GetToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "get") {
          r2 = "get";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"get\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_IfToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 2) === "if") {
          r2 = "if";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"if\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ImportToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "import") {
          r2 = "import";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"import\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_InstanceofToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 10) === "instanceof") {
          r2 = "instanceof";
          pos += 10;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"instanceof\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_InToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 2) === "in") {
          r2 = "in";
          pos += 2;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"in\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_NewToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "new") {
          r2 = "new";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"new\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_NullToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "null") {
          r2 = "null";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"null\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ReturnToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "return") {
          r2 = "return";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"return\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_SetToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "set") {
          r2 = "set";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"set\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_SuperToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "super") {
          r2 = "super";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"super\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_SwitchToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "switch") {
          r2 = "switch";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"switch\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ThisToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "this") {
          r2 = "this";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"this\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_ThrowToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "throw") {
          r2 = "throw";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"throw\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_TrueToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "true") {
          r2 = "true";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"true\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_TryToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "try") {
          r2 = "try";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"try\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_TypeofToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 6) === "typeof") {
          r2 = "typeof";
          pos += 6;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"typeof\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_VarToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 3) === "var") {
          r2 = "var";
          pos += 3;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"var\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_VoidToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "void") {
          r2 = "void";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"void\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_WhileToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 5) === "while") {
          r2 = "while";
          pos += 5;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"while\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_WithToken() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        if (input.substr(pos, 4) === "with") {
          r2 = "with";
          pos += 4;
        } else {
          r2 = null;
          if (reportFailures === 0) {
            matchFailed("\"with\"");
          }
        }
        if (r2 !== null) {
          r4 = pos;
          reportFailures++;
          r3 = parse_IdentifierPart();
          reportFailures--;
          if (r3 === null) {
            r3 = "";
          } else {
            r3 = null;
            pos = r4;
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse___() {
        var r0, r1;
        
        r0 = [];
        r1 = parse_WhiteSpace();
        if (r1 === null) {
          r1 = parse_LineTerminatorSequence();
          if (r1 === null) {
            r1 = parse_Comment();
          }
        }
        while (r1 !== null) {
          r0.push(r1);
          r1 = parse_WhiteSpace();
          if (r1 === null) {
            r1 = parse_LineTerminatorSequence();
            if (r1 === null) {
              r1 = parse_Comment();
            }
          }
        }
        return r0;
      }
      
      function parse__() {
        var r0, r1;
        
        r0 = [];
        r1 = parse_WhiteSpace();
        if (r1 === null) {
          r1 = parse_MultiLineCommentNoLineTerminator();
        }
        while (r1 !== null) {
          r0.push(r1);
          r1 = parse_WhiteSpace();
          if (r1 === null) {
            r1 = parse_MultiLineCommentNoLineTerminator();
          }
        }
        return r0;
      }
      
      function parse_EOS() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = parse___();
        if (r2 !== null) {
          if (input.charCodeAt(pos) === 59) {
            r3 = ";";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\";\"");
            }
          }
          if (r3 !== null) {
            r0 = [r2, r3];
          } else {
            r0 = null;
            pos = r1;
          }
        } else {
          r0 = null;
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = parse__();
          if (r2 !== null) {
            r3 = parse_SingleLineComment();
            r3 = r3 !== null ? r3 : "";
            if (r3 !== null) {
              r4 = parse_LineTerminatorSequence();
              if (r4 !== null) {
                r0 = [r2, r3, r4];
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
          } else {
            r0 = null;
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = parse__();
            if (r2 !== null) {
              r4 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 125) {
                r3 = "}";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              reportFailures--;
              if (r3 !== null) {
                r3 = "";
                pos = r4;
              } else {
                r3 = null;
              }
              if (r3 !== null) {
                r0 = [r2, r3];
              } else {
                r0 = null;
                pos = r1;
              }
            } else {
              r0 = null;
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = parse___();
              if (r2 !== null) {
                r3 = parse_EOF();
                if (r3 !== null) {
                  r0 = [r2, r3];
                } else {
                  r0 = null;
                  pos = r1;
                }
              } else {
                r0 = null;
                pos = r1;
              }
            }
          }
        }
        return r0;
      }
      
      function parse_EOF() {
        var r0, r1;
        
        r1 = pos;
        reportFailures++;
        if (input.length > pos) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("any character");
          }
        }
        reportFailures--;
        if (r0 === null) {
          r0 = "";
        } else {
          r0 = null;
          pos = r1;
        }
        return r0;
      }
      
      function parse_PrimaryExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r0 = parse_ThisToken();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "ThisExpression" }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_Identifier();
          if (r0 === null) {
            r0 = parse_Literal();
            if (r0 === null) {
              r0 = parse_ArrayLiteral();
              if (r0 === null) {
                r0 = parse_ObjectLiteral();
                if (r0 === null) {
                  r1 = pos;
                  r2 = pos;
                  if (input.charCodeAt(pos) === 40) {
                    r3 = "(";
                    pos++;
                  } else {
                    r3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (r3 !== null) {
                    r4 = parse___();
                    if (r4 !== null) {
                      r5 = parse_Expression();
                      if (r5 !== null) {
                        r6 = parse___();
                        if (r6 !== null) {
                          if (input.charCodeAt(pos) === 41) {
                            r7 = ")";
                            pos++;
                          } else {
                            r7 = null;
                            if (reportFailures === 0) {
                              matchFailed("\")\"");
                            }
                          }
                          if (r7 !== null) {
                            r0 = [r3, r4, r5, r6, r7];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                  if (r0 !== null) {
                    reportedPos = r1;
                    r0 = (function(expression) { return expression; })(r5);
                  }
                  if (r0 === null) {
                    pos = r1;
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ArrayLiteral() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 91) {
          r3 = "[";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"[\"");
          }
        }
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse_Elision();
            if (r7 !== null) {
              r8 = parse___();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 93) {
                r6 = "]";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"]\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(elision) {
              return {
                type:     "ArrayExpression",
                elements: optionalList(extractOptional(elision, 0))
              };
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 91) {
            r3 = "[";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"[\"");
            }
          }
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_ElementList();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 93) {
                    r7 = "]";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"]\"");
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(elements) {
                return {
                  type:     "ArrayExpression",
                  elements: elements
                };
              })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 91) {
              r3 = "[";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (r3 !== null) {
              r4 = parse___();
              if (r4 !== null) {
                r5 = parse_ElementList();
                if (r5 !== null) {
                  r6 = parse___();
                  if (r6 !== null) {
                    if (input.charCodeAt(pos) === 44) {
                      r7 = ",";
                      pos++;
                    } else {
                      r7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (r7 !== null) {
                      r8 = parse___();
                      if (r8 !== null) {
                        r10 = pos;
                        r11 = parse_Elision();
                        if (r11 !== null) {
                          r12 = parse___();
                          if (r12 !== null) {
                            r9 = [r11, r12];
                          } else {
                            r9 = null;
                            pos = r10;
                          }
                        } else {
                          r9 = null;
                          pos = r10;
                        }
                        r9 = r9 !== null ? r9 : "";
                        if (r9 !== null) {
                          if (input.charCodeAt(pos) === 93) {
                            r10 = "]";
                            pos++;
                          } else {
                            r10 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"]\"");
                            }
                          }
                          if (r10 !== null) {
                            r0 = [r3, r4, r5, r6, r7, r8, r9, r10];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(elements, elision) {
                  return {
                    type:     "ArrayExpression",
                    elements: elements.concat(optionalList(extractOptional(elision, 0)))
                  };
                })(r5, r9);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_ElementList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        r7 = pos;
        r8 = parse_Elision();
        if (r8 !== null) {
          r9 = parse___();
          if (r9 !== null) {
            r6 = [r8, r9];
          } else {
            r6 = null;
            pos = r7;
          }
        } else {
          r6 = null;
          pos = r7;
        }
        r6 = r6 !== null ? r6 : "";
        if (r6 !== null) {
          r7 = parse_AssignmentExpression();
          if (r7 !== null) {
            r3 = [r6, r7];
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(elision, element) {
                return optionalList(extractOptional(elision, 0)).concat(element);
              })(r6, r7);
        }
        if (r3 === null) {
          pos = r4;
        }
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse___();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r9 = ",";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r9 !== null) {
              r10 = parse___();
              if (r10 !== null) {
                r12 = pos;
                r13 = parse_Elision();
                if (r13 !== null) {
                  r14 = parse___();
                  if (r14 !== null) {
                    r11 = [r13, r14];
                  } else {
                    r11 = null;
                    pos = r12;
                  }
                } else {
                  r11 = null;
                  pos = r12;
                }
                r11 = r11 !== null ? r11 : "";
                if (r11 !== null) {
                  r12 = parse_AssignmentExpression();
                  if (r12 !== null) {
                    r5 = [r8, r9, r10, r11, r12];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(elision, element) {
                  return optionalList(extractOptional(elision, 0)).concat(element);
                })(r11, r12);
          }
          if (r5 === null) {
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse___();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r9 = ",";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r9 !== null) {
                r10 = parse___();
                if (r10 !== null) {
                  r12 = pos;
                  r13 = parse_Elision();
                  if (r13 !== null) {
                    r14 = parse___();
                    if (r14 !== null) {
                      r11 = [r13, r14];
                    } else {
                      r11 = null;
                      pos = r12;
                    }
                  } else {
                    r11 = null;
                    pos = r12;
                  }
                  r11 = r11 !== null ? r11 : "";
                  if (r11 !== null) {
                    r12 = parse_AssignmentExpression();
                    if (r12 !== null) {
                      r5 = [r8, r9, r10, r11, r12];
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(elision, element) {
                    return optionalList(extractOptional(elision, 0)).concat(element);
                  })(r11, r12);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return Array.prototype.concat.apply(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Elision() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 44) {
          r3 = ",";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\",\"");
          }
        }
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(commas) { return filledArray(commas.length + 1, null); })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ObjectLiteral() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 125) {
              r5 = "}";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"}\"");
              }
            }
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "ObjectExpression", properties: [] }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 123) {
            r3 = "{";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"{\"");
            }
          }
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_PropertyNameAndValueList();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 125) {
                    r7 = "}";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"}\"");
                    }
                  }
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(properties) {
                 return { type: "ObjectExpression", properties: properties };
               })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 123) {
              r3 = "{";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"{\"");
              }
            }
            if (r3 !== null) {
              r4 = parse___();
              if (r4 !== null) {
                r5 = parse_PropertyNameAndValueList();
                if (r5 !== null) {
                  r6 = parse___();
                  if (r6 !== null) {
                    if (input.charCodeAt(pos) === 44) {
                      r7 = ",";
                      pos++;
                    } else {
                      r7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\",\"");
                      }
                    }
                    if (r7 !== null) {
                      r8 = parse___();
                      if (r8 !== null) {
                        if (input.charCodeAt(pos) === 125) {
                          r9 = "}";
                          pos++;
                        } else {
                          r9 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"}\"");
                          }
                        }
                        if (r9 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(properties) {
                   return { type: "ObjectExpression", properties: properties };
                 })(r5);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_PropertyNameAndValueList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_PropertyAssignment();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_PropertyAssignment();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_PropertyAssignment();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 3);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_PropertyAssignment() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_PropertyName();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 58) {
              r5 = ":";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_AssignmentExpression();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(key, value) {
              return { key: key, value: value, kind: "init" };
            })(r3, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_GetToken();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_PropertyName();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  if (input.charCodeAt(pos) === 40) {
                    r7 = "(";
                    pos++;
                  } else {
                    r7 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (r7 !== null) {
                    r8 = parse___();
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        r9 = ")";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (r9 !== null) {
                        r10 = parse___();
                        if (r10 !== null) {
                          if (input.charCodeAt(pos) === 123) {
                            r11 = "{";
                            pos++;
                          } else {
                            r11 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"{\"");
                            }
                          }
                          if (r11 !== null) {
                            r12 = parse___();
                            if (r12 !== null) {
                              r13 = parse_FunctionBody();
                              if (r13 !== null) {
                                r14 = parse___();
                                if (r14 !== null) {
                                  if (input.charCodeAt(pos) === 125) {
                                    r15 = "}";
                                    pos++;
                                  } else {
                                    r15 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (r15 !== null) {
                                    r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15];
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(key, body) {
                return {
                  key:   key,
                  value: {
                    type:   "FunctionExpression",
                    id:     null,
                    params: [],
                    body:   body
                  },
                  kind:  "get"
                };
              })(r5, r13);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse_SetToken();
            if (r3 !== null) {
              r4 = parse___();
              if (r4 !== null) {
                r5 = parse_PropertyName();
                if (r5 !== null) {
                  r6 = parse___();
                  if (r6 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                      r7 = "(";
                      pos++;
                    } else {
                      r7 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (r7 !== null) {
                      r8 = parse___();
                      if (r8 !== null) {
                        r9 = parse_PropertySetParameterList();
                        if (r9 !== null) {
                          r10 = parse___();
                          if (r10 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                              r11 = ")";
                              pos++;
                            } else {
                              r11 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (r11 !== null) {
                              r12 = parse___();
                              if (r12 !== null) {
                                if (input.charCodeAt(pos) === 123) {
                                  r13 = "{";
                                  pos++;
                                } else {
                                  r13 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"{\"");
                                  }
                                }
                                if (r13 !== null) {
                                  r14 = parse___();
                                  if (r14 !== null) {
                                    r15 = parse_FunctionBody();
                                    if (r15 !== null) {
                                      r16 = parse___();
                                      if (r16 !== null) {
                                        if (input.charCodeAt(pos) === 125) {
                                          r17 = "}";
                                          pos++;
                                        } else {
                                          r17 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"}\"");
                                          }
                                        }
                                        if (r17 !== null) {
                                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17];
                                        } else {
                                          r0 = null;
                                          pos = r2;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r2;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r2;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(key, params, body) {
                  return {
                    key:   key,
                    value: {
                      type:   "FunctionExpression",
                      id:     null,
                      params: params,
                      body:   body
                    },
                    kind:  "set"
                  };
                })(r5, r9, r15);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_PropertyName() {
        var r0;
        
        r0 = parse_IdentifierName();
        if (r0 === null) {
          r0 = parse_StringLiteral();
          if (r0 === null) {
            r0 = parse_NumericLiteral();
          }
        }
        return r0;
      }
      
      function parse_PropertySetParameterList() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_Identifier();
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(id) { return [id]; })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_MemberExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_PrimaryExpression();
        if (r3 === null) {
          r3 = parse_FunctionExpression();
          if (r3 === null) {
            r4 = pos;
            r5 = pos;
            r6 = parse_NewToken();
            if (r6 !== null) {
              r7 = parse___();
              if (r7 !== null) {
                r8 = parse_MemberExpression();
                if (r8 !== null) {
                  r9 = parse___();
                  if (r9 !== null) {
                    r10 = parse_Arguments();
                    if (r10 !== null) {
                      r3 = [r6, r7, r8, r9, r10];
                    } else {
                      r3 = null;
                      pos = r5;
                    }
                  } else {
                    r3 = null;
                    pos = r5;
                  }
                } else {
                  r3 = null;
                  pos = r5;
                }
              } else {
                r3 = null;
                pos = r5;
              }
            } else {
              r3 = null;
              pos = r5;
            }
            if (r3 !== null) {
              reportedPos = r4;
              r3 = (function(callee, args) {
                      return { type: "NewExpression", callee: callee, arguments: args };
                    })(r8, r10);
            }
            if (r3 === null) {
              pos = r4;
            }
          }
        }
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse___();
          if (r8 !== null) {
            if (input.charCodeAt(pos) === 91) {
              r9 = "[";
              pos++;
            } else {
              r9 = null;
              if (reportFailures === 0) {
                matchFailed("\"[\"");
              }
            }
            if (r9 !== null) {
              r10 = parse___();
              if (r10 !== null) {
                r11 = parse_Expression();
                if (r11 !== null) {
                  r12 = parse___();
                  if (r12 !== null) {
                    if (input.charCodeAt(pos) === 93) {
                      r13 = "]";
                      pos++;
                    } else {
                      r13 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"]\"");
                      }
                    }
                    if (r13 !== null) {
                      r5 = [r8, r9, r10, r11, r12, r13];
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(property) {
                    return { property: property, computed: true };
                  })(r11);
          }
          if (r5 === null) {
            pos = r6;
          }
          if (r5 === null) {
            r6 = pos;
            r7 = pos;
            r8 = parse___();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 46) {
                r9 = ".";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\".\"");
                }
              }
              if (r9 !== null) {
                r10 = parse___();
                if (r10 !== null) {
                  r11 = parse_IdentifierName();
                  if (r11 !== null) {
                    r5 = [r8, r9, r10, r11];
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(property) {
                      return { property: property, computed: false };
                    })(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse___();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 91) {
                r9 = "[";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (r9 !== null) {
                r10 = parse___();
                if (r10 !== null) {
                  r11 = parse_Expression();
                  if (r11 !== null) {
                    r12 = parse___();
                    if (r12 !== null) {
                      if (input.charCodeAt(pos) === 93) {
                        r13 = "]";
                        pos++;
                      } else {
                        r13 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (r13 !== null) {
                        r5 = [r8, r9, r10, r11, r12, r13];
                      } else {
                        r5 = null;
                        pos = r7;
                      }
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(property) {
                      return { property: property, computed: true };
                    })(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
            if (r5 === null) {
              r6 = pos;
              r7 = pos;
              r8 = parse___();
              if (r8 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  r9 = ".";
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (r9 !== null) {
                  r10 = parse___();
                  if (r10 !== null) {
                    r11 = parse_IdentifierName();
                    if (r11 !== null) {
                      r5 = [r8, r9, r10, r11];
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
              if (r5 !== null) {
                reportedPos = r6;
                r5 = (function(property) {
                        return { property: property, computed: false };
                      })(r11);
              }
              if (r5 === null) {
                pos = r6;
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildTree(first, rest, function(result, element) {
                return {
                  type:     "MemberExpression",
                  object:   result,
                  property: element.property,
                  computed: element.computed
                };
              });
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_NewExpression() {
        var r0, r1, r2, r3, r4, r5;
        
        r0 = parse_MemberExpression();
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_NewToken();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_NewExpression();
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(callee) {
                return { type: "NewExpression", callee: callee, arguments: [] };
              })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_CallExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        r5 = pos;
        r6 = parse_MemberExpression();
        if (r6 !== null) {
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_Arguments();
            if (r8 !== null) {
              r3 = [r6, r7, r8];
            } else {
              r3 = null;
              pos = r5;
            }
          } else {
            r3 = null;
            pos = r5;
          }
        } else {
          r3 = null;
          pos = r5;
        }
        if (r3 !== null) {
          reportedPos = r4;
          r3 = (function(callee, args) {
                return { type: "CallExpression", callee: callee, arguments: args };
              })(r6, r8);
        }
        if (r3 === null) {
          pos = r4;
        }
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = pos;
          r8 = parse___();
          if (r8 !== null) {
            r9 = parse_Arguments();
            if (r9 !== null) {
              r5 = [r8, r9];
            } else {
              r5 = null;
              pos = r7;
            }
          } else {
            r5 = null;
            pos = r7;
          }
          if (r5 !== null) {
            reportedPos = r6;
            r5 = (function(args) {
                    return { type: "CallExpression", arguments: args };
                  })(r9);
          }
          if (r5 === null) {
            pos = r6;
          }
          if (r5 === null) {
            r6 = pos;
            r7 = pos;
            r8 = parse___();
            if (r8 !== null) {
              if (input.charCodeAt(pos) === 91) {
                r9 = "[";
                pos++;
              } else {
                r9 = null;
                if (reportFailures === 0) {
                  matchFailed("\"[\"");
                }
              }
              if (r9 !== null) {
                r10 = parse___();
                if (r10 !== null) {
                  r11 = parse_Expression();
                  if (r11 !== null) {
                    r12 = parse___();
                    if (r12 !== null) {
                      if (input.charCodeAt(pos) === 93) {
                        r13 = "]";
                        pos++;
                      } else {
                        r13 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"]\"");
                        }
                      }
                      if (r13 !== null) {
                        r5 = [r8, r9, r10, r11, r12, r13];
                      } else {
                        r5 = null;
                        pos = r7;
                      }
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(property) {
                      return {
                        type:     "MemberExpression",
                        property: property,
                        computed: true
                      };
                    })(r11);
            }
            if (r5 === null) {
              pos = r6;
            }
            if (r5 === null) {
              r6 = pos;
              r7 = pos;
              r8 = parse___();
              if (r8 !== null) {
                if (input.charCodeAt(pos) === 46) {
                  r9 = ".";
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("\".\"");
                  }
                }
                if (r9 !== null) {
                  r10 = parse___();
                  if (r10 !== null) {
                    r11 = parse_IdentifierName();
                    if (r11 !== null) {
                      r5 = [r8, r9, r10, r11];
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
              if (r5 !== null) {
                reportedPos = r6;
                r5 = (function(property) {
                        return {
                          type:     "MemberExpression",
                          property: property,
                          computed: false
                        };
                      })(r11);
              }
              if (r5 === null) {
                pos = r6;
              }
            }
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = pos;
            r8 = parse___();
            if (r8 !== null) {
              r9 = parse_Arguments();
              if (r9 !== null) {
                r5 = [r8, r9];
              } else {
                r5 = null;
                pos = r7;
              }
            } else {
              r5 = null;
              pos = r7;
            }
            if (r5 !== null) {
              reportedPos = r6;
              r5 = (function(args) {
                      return { type: "CallExpression", arguments: args };
                    })(r9);
            }
            if (r5 === null) {
              pos = r6;
            }
            if (r5 === null) {
              r6 = pos;
              r7 = pos;
              r8 = parse___();
              if (r8 !== null) {
                if (input.charCodeAt(pos) === 91) {
                  r9 = "[";
                  pos++;
                } else {
                  r9 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"[\"");
                  }
                }
                if (r9 !== null) {
                  r10 = parse___();
                  if (r10 !== null) {
                    r11 = parse_Expression();
                    if (r11 !== null) {
                      r12 = parse___();
                      if (r12 !== null) {
                        if (input.charCodeAt(pos) === 93) {
                          r13 = "]";
                          pos++;
                        } else {
                          r13 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"]\"");
                          }
                        }
                        if (r13 !== null) {
                          r5 = [r8, r9, r10, r11, r12, r13];
                        } else {
                          r5 = null;
                          pos = r7;
                        }
                      } else {
                        r5 = null;
                        pos = r7;
                      }
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
              } else {
                r5 = null;
                pos = r7;
              }
              if (r5 !== null) {
                reportedPos = r6;
                r5 = (function(property) {
                        return {
                          type:     "MemberExpression",
                          property: property,
                          computed: true
                        };
                      })(r11);
              }
              if (r5 === null) {
                pos = r6;
              }
              if (r5 === null) {
                r6 = pos;
                r7 = pos;
                r8 = parse___();
                if (r8 !== null) {
                  if (input.charCodeAt(pos) === 46) {
                    r9 = ".";
                    pos++;
                  } else {
                    r9 = null;
                    if (reportFailures === 0) {
                      matchFailed("\".\"");
                    }
                  }
                  if (r9 !== null) {
                    r10 = parse___();
                    if (r10 !== null) {
                      r11 = parse_IdentifierName();
                      if (r11 !== null) {
                        r5 = [r8, r9, r10, r11];
                      } else {
                        r5 = null;
                        pos = r7;
                      }
                    } else {
                      r5 = null;
                      pos = r7;
                    }
                  } else {
                    r5 = null;
                    pos = r7;
                  }
                } else {
                  r5 = null;
                  pos = r7;
                }
                if (r5 !== null) {
                  reportedPos = r6;
                  r5 = (function(property) {
                          return {
                            type:     "MemberExpression",
                            property: property,
                            computed: false
                          };
                        })(r11);
                }
                if (r5 === null) {
                  pos = r6;
                }
              }
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildTree(first, rest, function(result, element) {
                element[TYPES_TO_PROPERTY_NAMES[element.type]] = result;
        
                return element;
              });
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Arguments() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 40) {
          r3 = "(";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse_ArgumentList();
            if (r7 !== null) {
              r8 = parse___();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 41) {
                r6 = ")";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\")\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(args) {
              return optionalList(extractOptional(args, 0));
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ArgumentList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_AssignmentExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_AssignmentExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_AssignmentExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 3);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LeftHandSideExpression() {
        var r0;
        
        r0 = parse_CallExpression();
        if (r0 === null) {
          r0 = parse_NewExpression();
        }
        return r0;
      }
      
      function parse_PostfixExpression() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LeftHandSideExpression();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_PostfixOperator();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(argument, operator) {
              return {
                type:     "UpdateExpression",
                operator: operator,
                argument: argument,
                prefix:   false
              };
            })(r3, r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_LeftHandSideExpression();
        }
        return r0;
      }
      
      function parse_PostfixOperator() {
        var r0;
        
        if (input.substr(pos, 2) === "++") {
          r0 = "++";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"++\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === "--") {
            r0 = "--";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"--\"");
            }
          }
        }
        return r0;
      }
      
      function parse_UnaryExpression() {
        var r0, r1, r2, r3, r4, r5;
        
        r0 = parse_PostfixExpression();
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_UnaryOperator();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_UnaryExpression();
              if (r5 !== null) {
                r0 = [r3, r4, r5];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(operator, argument) {
                var type = (operator === "++" || operator === "--")
                  ? "UpdateExpression"
                  : "UnaryExpression";
          
                return {
                  type:     type,
                  operator: operator,
                  argument: argument,
                  prefix:   true
                };
              })(r3, r5);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_UnaryOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r0 = parse_DeleteToken();
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        if (r0 === null) {
          r1 = pos;
          r0 = parse_VoidToken();
          if (r0 !== null) {
            r0 = input.substring(pos, r1);
          }
          if (r0 === null) {
            r1 = pos;
            r0 = parse_TypeofToken();
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
            if (r0 === null) {
              if (input.substr(pos, 2) === "++") {
                r0 = "++";
                pos += 2;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"++\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 2) === "--") {
                  r0 = "--";
                  pos += 2;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"--\"");
                  }
                }
                if (r0 === null) {
                  r1 = pos;
                  r2 = pos;
                  if (input.charCodeAt(pos) === 43) {
                    r3 = "+";
                    pos++;
                  } else {
                    r3 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"+\"");
                    }
                  }
                  if (r3 !== null) {
                    r5 = pos;
                    reportFailures++;
                    if (input.charCodeAt(pos) === 61) {
                      r4 = "=";
                      pos++;
                    } else {
                      r4 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"=\"");
                      }
                    }
                    reportFailures--;
                    if (r4 === null) {
                      r4 = "";
                    } else {
                      r4 = null;
                      pos = r5;
                    }
                    if (r4 !== null) {
                      r0 = [r3, r4];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                  if (r0 !== null) {
                    r0 = input.substring(pos, r1);
                  }
                  if (r0 === null) {
                    r1 = pos;
                    r2 = pos;
                    if (input.charCodeAt(pos) === 45) {
                      r3 = "-";
                      pos++;
                    } else {
                      r3 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"-\"");
                      }
                    }
                    if (r3 !== null) {
                      r5 = pos;
                      reportFailures++;
                      if (input.charCodeAt(pos) === 61) {
                        r4 = "=";
                        pos++;
                      } else {
                        r4 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"=\"");
                        }
                      }
                      reportFailures--;
                      if (r4 === null) {
                        r4 = "";
                      } else {
                        r4 = null;
                        pos = r5;
                      }
                      if (r4 !== null) {
                        r0 = [r3, r4];
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                    if (r0 !== null) {
                      r0 = input.substring(pos, r1);
                    }
                    if (r0 === null) {
                      if (input.charCodeAt(pos) === 126) {
                        r0 = "~";
                        pos++;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"~\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.charCodeAt(pos) === 33) {
                          r0 = "!";
                          pos++;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"!\"");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_MultiplicativeExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_UnaryExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_MultiplicativeOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_UnaryExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_MultiplicativeOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_UnaryExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_MultiplicativeOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 42) {
          r3 = "*";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"*\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 47) {
            r3 = "/";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"/\"");
            }
          }
          if (r3 !== null) {
            r5 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 61) {
              r4 = "=";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            r0 = input.substring(pos, r1);
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 37) {
              r3 = "%";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"%\"");
              }
            }
            if (r3 !== null) {
              r5 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 61) {
                r4 = "=";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (r4 === null) {
                r4 = "";
              } else {
                r4 = null;
                pos = r5;
              }
              if (r4 !== null) {
                r0 = [r3, r4];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
          }
        }
        return r0;
      }
      
      function parse_AdditiveExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_MultiplicativeExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_AdditiveOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_MultiplicativeExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_AdditiveOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_MultiplicativeExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_AdditiveOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 43) {
          r3 = "+";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"+\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (/^[+=]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[+=]");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 45) {
            r3 = "-";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"-\"");
            }
          }
          if (r3 !== null) {
            r5 = pos;
            reportFailures++;
            if (/^[\-=]/.test(input.charAt(pos))) {
              r4 = input.charAt(pos);
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("[\\-=]");
              }
            }
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            r0 = input.substring(pos, r1);
          }
        }
        return r0;
      }
      
      function parse_ShiftExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_AdditiveExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_ShiftOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_AdditiveExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_ShiftOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_AdditiveExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ShiftOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.substr(pos, 2) === "<<") {
          r3 = "<<";
          pos += 2;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"<<\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.substr(pos, 3) === ">>>") {
            r3 = ">>>";
            pos += 3;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\">>>\"");
            }
          }
          if (r3 !== null) {
            r5 = pos;
            reportFailures++;
            if (input.charCodeAt(pos) === 61) {
              r4 = "=";
              pos++;
            } else {
              r4 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            reportFailures--;
            if (r4 === null) {
              r4 = "";
            } else {
              r4 = null;
              pos = r5;
            }
            if (r4 !== null) {
              r0 = [r3, r4];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            r0 = input.substring(pos, r1);
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.substr(pos, 2) === ">>") {
              r3 = ">>";
              pos += 2;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\">>\"");
              }
            }
            if (r3 !== null) {
              r5 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 61) {
                r4 = "=";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (r4 === null) {
                r4 = "";
              } else {
                r4 = null;
                pos = r5;
              }
              if (r4 !== null) {
                r0 = [r3, r4];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
          }
        }
        return r0;
      }
      
      function parse_RelationalExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_ShiftExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_RelationalOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_ShiftExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_RelationalOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_ShiftExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_RelationalOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        if (input.substr(pos, 2) === "<=") {
          r0 = "<=";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<=\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === ">=") {
            r0 = ">=";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 60) {
              r3 = "<";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            if (r3 !== null) {
              r5 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 60) {
                r4 = "<";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<\"");
                }
              }
              reportFailures--;
              if (r4 === null) {
                r4 = "";
              } else {
                r4 = null;
                pos = r5;
              }
              if (r4 !== null) {
                r0 = [r3, r4];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
            if (r0 === null) {
              r1 = pos;
              r2 = pos;
              if (input.charCodeAt(pos) === 62) {
                r3 = ">";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (r3 !== null) {
                r5 = pos;
                reportFailures++;
                if (input.charCodeAt(pos) === 62) {
                  r4 = ">";
                  pos++;
                } else {
                  r4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                reportFailures--;
                if (r4 === null) {
                  r4 = "";
                } else {
                  r4 = null;
                  pos = r5;
                }
                if (r4 !== null) {
                  r0 = [r3, r4];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
              if (r0 !== null) {
                r0 = input.substring(pos, r1);
              }
              if (r0 === null) {
                r1 = pos;
                r0 = parse_InstanceofToken();
                if (r0 !== null) {
                  r0 = input.substring(pos, r1);
                }
                if (r0 === null) {
                  r1 = pos;
                  r0 = parse_InToken();
                  if (r0 !== null) {
                    r0 = input.substring(pos, r1);
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_RelationalExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_ShiftExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_RelationalOperatorNoIn();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_ShiftExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_RelationalOperatorNoIn();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_ShiftExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_RelationalOperatorNoIn() {
        var r0, r1, r2, r3, r4, r5;
        
        if (input.substr(pos, 2) === "<=") {
          r0 = "<=";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"<=\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === ">=") {
            r0 = ">=";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\">=\"");
            }
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            if (input.charCodeAt(pos) === 60) {
              r3 = "<";
              pos++;
            } else {
              r3 = null;
              if (reportFailures === 0) {
                matchFailed("\"<\"");
              }
            }
            if (r3 !== null) {
              r5 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 60) {
                r4 = "<";
                pos++;
              } else {
                r4 = null;
                if (reportFailures === 0) {
                  matchFailed("\"<\"");
                }
              }
              reportFailures--;
              if (r4 === null) {
                r4 = "";
              } else {
                r4 = null;
                pos = r5;
              }
              if (r4 !== null) {
                r0 = [r3, r4];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              r0 = input.substring(pos, r1);
            }
            if (r0 === null) {
              r1 = pos;
              r2 = pos;
              if (input.charCodeAt(pos) === 62) {
                r3 = ">";
                pos++;
              } else {
                r3 = null;
                if (reportFailures === 0) {
                  matchFailed("\">\"");
                }
              }
              if (r3 !== null) {
                r5 = pos;
                reportFailures++;
                if (input.charCodeAt(pos) === 62) {
                  r4 = ">";
                  pos++;
                } else {
                  r4 = null;
                  if (reportFailures === 0) {
                    matchFailed("\">\"");
                  }
                }
                reportFailures--;
                if (r4 === null) {
                  r4 = "";
                } else {
                  r4 = null;
                  pos = r5;
                }
                if (r4 !== null) {
                  r0 = [r3, r4];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
              if (r0 !== null) {
                r0 = input.substring(pos, r1);
              }
              if (r0 === null) {
                r1 = pos;
                r0 = parse_InstanceofToken();
                if (r0 !== null) {
                  r0 = input.substring(pos, r1);
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_EqualityExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_RelationalExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_EqualityOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_RelationalExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_EqualityOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_RelationalExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_EqualityExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_RelationalExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_EqualityOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_RelationalExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_EqualityOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_RelationalExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_EqualityOperator() {
        var r0;
        
        if (input.substr(pos, 3) === "===") {
          r0 = "===";
          pos += 3;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"===\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 3) === "!==") {
            r0 = "!==";
            pos += 3;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"!==\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 2) === "==") {
              r0 = "==";
              pos += 2;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"==\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 2) === "!=") {
                r0 = "!=";
                pos += 2;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"!=\"");
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_BitwiseANDExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_EqualityExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseANDOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_EqualityExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseANDOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_EqualityExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseANDExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_EqualityExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseANDOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_EqualityExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseANDOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_EqualityExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseANDOperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 38) {
          r3 = "&";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"&\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (/^[&=]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[&=]");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        return r0;
      }
      
      function parse_BitwiseXORExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseANDExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseXOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseANDExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseXOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseANDExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseXORExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseANDExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseXOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseANDExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseXOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseANDExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseXOROperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 94) {
          r3 = "^";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"^\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        return r0;
      }
      
      function parse_BitwiseORExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseXORExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseXORExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseXORExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseORExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseXORExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_BitwiseOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseXORExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_BitwiseOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseXORExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_BitwiseOROperator() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 124) {
          r3 = "|";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"|\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (/^[|=]/.test(input.charAt(pos))) {
            r4 = input.charAt(pos);
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("[|=]");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          r0 = input.substring(pos, r1);
        }
        return r0;
      }
      
      function parse_LogicalANDExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseORExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_LogicalANDOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseORExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_LogicalANDOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseORExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LogicalANDExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BitwiseORExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_LogicalANDOperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_BitwiseORExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_LogicalANDOperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_BitwiseORExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LogicalANDOperator() {
        var r0;
        
        if (input.substr(pos, 2) === "&&") {
          r0 = "&&";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"&&\"");
          }
        }
        return r0;
      }
      
      function parse_LogicalORExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LogicalANDExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_LogicalOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_LogicalANDExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_LogicalOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_LogicalANDExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LogicalORExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LogicalANDExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_LogicalOROperator();
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_LogicalANDExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_LogicalOROperator();
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_LogicalANDExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildBinaryExpression(first, rest); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LogicalOROperator() {
        var r0;
        
        if (input.substr(pos, 2) === "||") {
          r0 = "||";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"||\"");
          }
        }
        return r0;
      }
      
      function parse_ConditionalExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LogicalORExpression();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 63) {
              r5 = "?";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_AssignmentExpression();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      r9 = ":";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_AssignmentExpression();
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(test, consequent, alternate) {
              return {
                type:       "ConditionalExpression",
                test:       test,
                consequent: consequent,
                alternate:  alternate
              };
            })(r3, r7, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_LogicalORExpression();
        }
        return r0;
      }
      
      function parse_ConditionalExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LogicalORExpressionNoIn();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 63) {
              r5 = "?";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"?\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_AssignmentExpression();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 58) {
                      r9 = ":";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\":\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_AssignmentExpressionNoIn();
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(test, consequent, alternate) {
              return {
                type:       "ConditionalExpression",
                test:       test,
                consequent: consequent,
                alternate:  alternate
              };
            })(r3, r7, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r0 = parse_LogicalORExpressionNoIn();
        }
        return r0;
      }
      
      function parse_AssignmentExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LeftHandSideExpression();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 61) {
              r5 = "=";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (r5 !== null) {
              r7 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 61) {
                r6 = "=";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (r6 === null) {
                r6 = "";
              } else {
                r6 = null;
                pos = r7;
              }
              if (r6 !== null) {
                r7 = parse___();
                if (r7 !== null) {
                  r8 = parse_AssignmentExpression();
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(left, right) {
              return {
                type:     "AssignmentExpression",
                operator: "=",
                left:     left,
                right:    right
              };
            })(r3, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_LeftHandSideExpression();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_AssignmentOperator();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  r7 = parse_AssignmentExpression();
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(left, operator, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: operator,
                  left:     left,
                  right:    right
                };
              })(r3, r5, r7);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r0 = parse_ConditionalExpression();
          }
        }
        return r0;
      }
      
      function parse_AssignmentExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_LeftHandSideExpression();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 61) {
              r5 = "=";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"=\"");
              }
            }
            if (r5 !== null) {
              r7 = pos;
              reportFailures++;
              if (input.charCodeAt(pos) === 61) {
                r6 = "=";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"=\"");
                }
              }
              reportFailures--;
              if (r6 === null) {
                r6 = "";
              } else {
                r6 = null;
                pos = r7;
              }
              if (r6 !== null) {
                r7 = parse___();
                if (r7 !== null) {
                  r8 = parse_AssignmentExpressionNoIn();
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(left, right) {
              return {
                type:     "AssignmentExpression",
                operator: "=",
                left:     left,
                right:    right
              };
            })(r3, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_LeftHandSideExpression();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_AssignmentOperator();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  r7 = parse_AssignmentExpressionNoIn();
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(left, operator, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: operator,
                  left:     left,
                  right:    right
                };
              })(r3, r5, r7);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r0 = parse_ConditionalExpressionNoIn();
          }
        }
        return r0;
      }
      
      function parse_AssignmentOperator() {
        var r0;
        
        if (input.substr(pos, 2) === "*=") {
          r0 = "*=";
          pos += 2;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\"*=\"");
          }
        }
        if (r0 === null) {
          if (input.substr(pos, 2) === "/=") {
            r0 = "/=";
            pos += 2;
          } else {
            r0 = null;
            if (reportFailures === 0) {
              matchFailed("\"/=\"");
            }
          }
          if (r0 === null) {
            if (input.substr(pos, 2) === "%=") {
              r0 = "%=";
              pos += 2;
            } else {
              r0 = null;
              if (reportFailures === 0) {
                matchFailed("\"%=\"");
              }
            }
            if (r0 === null) {
              if (input.substr(pos, 2) === "+=") {
                r0 = "+=";
                pos += 2;
              } else {
                r0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"+=\"");
                }
              }
              if (r0 === null) {
                if (input.substr(pos, 2) === "-=") {
                  r0 = "-=";
                  pos += 2;
                } else {
                  r0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-=\"");
                  }
                }
                if (r0 === null) {
                  if (input.substr(pos, 3) === "<<=") {
                    r0 = "<<=";
                    pos += 3;
                  } else {
                    r0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"<<=\"");
                    }
                  }
                  if (r0 === null) {
                    if (input.substr(pos, 3) === ">>=") {
                      r0 = ">>=";
                      pos += 3;
                    } else {
                      r0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\">>=\"");
                      }
                    }
                    if (r0 === null) {
                      if (input.substr(pos, 4) === ">>>=") {
                        r0 = ">>>=";
                        pos += 4;
                      } else {
                        r0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\">>>=\"");
                        }
                      }
                      if (r0 === null) {
                        if (input.substr(pos, 2) === "&=") {
                          r0 = "&=";
                          pos += 2;
                        } else {
                          r0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"&=\"");
                          }
                        }
                        if (r0 === null) {
                          if (input.substr(pos, 2) === "^=") {
                            r0 = "^=";
                            pos += 2;
                          } else {
                            r0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"^=\"");
                            }
                          }
                          if (r0 === null) {
                            if (input.substr(pos, 2) === "|=") {
                              r0 = "|=";
                              pos += 2;
                            } else {
                              r0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"|=\"");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Expression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_AssignmentExpression();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_AssignmentExpression();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_AssignmentExpression();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return rest.length > 0
                ? { type: "SequenceExpression", expressions: buildList(first, rest, 3) }
                : first;
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExpressionNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_AssignmentExpressionNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_AssignmentExpressionNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_AssignmentExpressionNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return rest.length > 0
                ? { type: "SequenceExpression", expressions: buildList(first, rest, 3) }
                : first;
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Statement() {
        var r0;
        
        r0 = parse_Block();
        if (r0 === null) {
          r0 = parse_VariableStatement();
          if (r0 === null) {
            r0 = parse_EmptyStatement();
            if (r0 === null) {
              r0 = parse_ExpressionStatement();
              if (r0 === null) {
                r0 = parse_IfStatement();
                if (r0 === null) {
                  r0 = parse_IterationStatement();
                  if (r0 === null) {
                    r0 = parse_ContinueStatement();
                    if (r0 === null) {
                      r0 = parse_BreakStatement();
                      if (r0 === null) {
                        r0 = parse_ReturnStatement();
                        if (r0 === null) {
                          r0 = parse_WithStatement();
                          if (r0 === null) {
                            r0 = parse_LabelledStatement();
                            if (r0 === null) {
                              r0 = parse_SwitchStatement();
                              if (r0 === null) {
                                r0 = parse_ThrowStatement();
                                if (r0 === null) {
                                  r0 = parse_TryStatement();
                                  if (r0 === null) {
                                    r0 = parse_DebuggerStatement();
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_Block() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse_StatementList();
            if (r7 !== null) {
              r8 = parse___();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 125) {
                r6 = "}";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body) {
              return {
                type: "BlockStatement",
                body: optionalList(extractOptional(body, 0))
              };
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_StatementList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_Statement();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_Statement();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_Statement();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildList(first, rest, 1); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_VariableStatement() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_VarToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_VariableDeclarationList();
            if (r5 !== null) {
              r6 = parse_EOS();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(declarations) {
              return {
                type:         "VariableDeclaration",
                declarations: declarations
              };
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_VariableDeclarationList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_VariableDeclaration();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_VariableDeclaration();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_VariableDeclaration();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 3);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_VariableDeclarationListNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_VariableDeclarationNoIn();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_VariableDeclarationNoIn();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_VariableDeclarationNoIn();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 3);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_VariableDeclaration() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_Identifier();
        if (r3 !== null) {
          r5 = pos;
          r6 = parse___();
          if (r6 !== null) {
            r7 = parse_Initialiser();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(id, init) {
              return {
                type: "VariableDeclarator",
                id:   id,
                init: extractOptional(init, 1)
              };
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_VariableDeclarationNoIn() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_Identifier();
        if (r3 !== null) {
          r5 = pos;
          r6 = parse___();
          if (r6 !== null) {
            r7 = parse_InitialiserNoIn();
            if (r7 !== null) {
              r4 = [r6, r7];
            } else {
              r4 = null;
              pos = r5;
            }
          } else {
            r4 = null;
            pos = r5;
          }
          r4 = r4 !== null ? r4 : "";
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(id, init) {
              return {
                type: "VariableDeclarator",
                id:   id,
                init: extractOptional(init, 1)
              };
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Initialiser() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 61) {
          r3 = "=";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r5 = parse___();
            if (r5 !== null) {
              r6 = parse_AssignmentExpression();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(expression) { return expression; })(r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_InitialiserNoIn() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 61) {
          r3 = "=";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"=\"");
          }
        }
        if (r3 !== null) {
          r5 = pos;
          reportFailures++;
          if (input.charCodeAt(pos) === 61) {
            r4 = "=";
            pos++;
          } else {
            r4 = null;
            if (reportFailures === 0) {
              matchFailed("\"=\"");
            }
          }
          reportFailures--;
          if (r4 === null) {
            r4 = "";
          } else {
            r4 = null;
            pos = r5;
          }
          if (r4 !== null) {
            r5 = parse___();
            if (r5 !== null) {
              r6 = parse_AssignmentExpressionNoIn();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(expression) { return expression; })(r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_EmptyStatement() {
        var r0, r1;
        
        r1 = pos;
        if (input.charCodeAt(pos) === 59) {
          r0 = ";";
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("\";\"");
          }
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "EmptyStatement" }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ExpressionStatement() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r4 = pos;
        reportFailures++;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 === null) {
          r3 = parse_FunctionToken();
        }
        reportFailures--;
        if (r3 === null) {
          r3 = "";
        } else {
          r3 = null;
          pos = r4;
        }
        if (r3 !== null) {
          r4 = parse_Expression();
          if (r4 !== null) {
            r5 = parse_EOS();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(expression) {
              return {
                type:       "ExpressionStatement",
                expression: expression
              };
            })(r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_IfStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_IfToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 40) {
              r5 = "(";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Expression();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_Statement();
                        if (r11 !== null) {
                          r12 = parse___();
                          if (r12 !== null) {
                            r13 = parse_ElseToken();
                            if (r13 !== null) {
                              r14 = parse___();
                              if (r14 !== null) {
                                r15 = parse_Statement();
                                if (r15 !== null) {
                                  r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15];
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(test, consequent, alternate) {
              return {
                type:       "IfStatement",
                test:       test,
                consequent: consequent,
                alternate:  alternate
              };
            })(r7, r11, r15);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_IfToken();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 40) {
                r5 = "(";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  r7 = parse_Expression();
                  if (r7 !== null) {
                    r8 = parse___();
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        r9 = ")";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (r9 !== null) {
                        r10 = parse___();
                        if (r10 !== null) {
                          r11 = parse_Statement();
                          if (r11 !== null) {
                            r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(test, consequent) {
                return {
                  type:       "IfStatement",
                  test:       test,
                  consequent: consequent,
                  alternate:  null
                };
              })(r7, r11);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_IterationStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_DoToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_Statement();
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_WhileToken();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                      r9 = "(";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_Expression();
                        if (r11 !== null) {
                          r12 = parse___();
                          if (r12 !== null) {
                            if (input.charCodeAt(pos) === 41) {
                              r13 = ")";
                              pos++;
                            } else {
                              r13 = null;
                              if (reportFailures === 0) {
                                matchFailed("\")\"");
                              }
                            }
                            if (r13 !== null) {
                              r14 = parse_EOS();
                              if (r14 !== null) {
                                r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14];
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body, test) { return { type: "DoWhileStatement", body: body, test: test }; })(r5, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_WhileToken();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              if (input.charCodeAt(pos) === 40) {
                r5 = "(";
                pos++;
              } else {
                r5 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  r7 = parse_Expression();
                  if (r7 !== null) {
                    r8 = parse___();
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        r9 = ")";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (r9 !== null) {
                        r10 = parse___();
                        if (r10 !== null) {
                          r11 = parse_Statement();
                          if (r11 !== null) {
                            r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(test, body) { return { type: "WhileStatement", test: test, body: body }; })(r7, r11);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse_ForToken();
            if (r3 !== null) {
              r4 = parse___();
              if (r4 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  r5 = "(";
                  pos++;
                } else {
                  r5 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (r5 !== null) {
                  r6 = parse___();
                  if (r6 !== null) {
                    r8 = pos;
                    r9 = parse_ExpressionNoIn();
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r7 = [r9, r10];
                      } else {
                        r7 = null;
                        pos = r8;
                      }
                    } else {
                      r7 = null;
                      pos = r8;
                    }
                    r7 = r7 !== null ? r7 : "";
                    if (r7 !== null) {
                      if (input.charCodeAt(pos) === 59) {
                        r8 = ";";
                        pos++;
                      } else {
                        r8 = null;
                        if (reportFailures === 0) {
                          matchFailed("\";\"");
                        }
                      }
                      if (r8 !== null) {
                        r9 = parse___();
                        if (r9 !== null) {
                          r11 = pos;
                          r12 = parse_Expression();
                          if (r12 !== null) {
                            r13 = parse___();
                            if (r13 !== null) {
                              r10 = [r12, r13];
                            } else {
                              r10 = null;
                              pos = r11;
                            }
                          } else {
                            r10 = null;
                            pos = r11;
                          }
                          r10 = r10 !== null ? r10 : "";
                          if (r10 !== null) {
                            if (input.charCodeAt(pos) === 59) {
                              r11 = ";";
                              pos++;
                            } else {
                              r11 = null;
                              if (reportFailures === 0) {
                                matchFailed("\";\"");
                              }
                            }
                            if (r11 !== null) {
                              r12 = parse___();
                              if (r12 !== null) {
                                r14 = pos;
                                r15 = parse_Expression();
                                if (r15 !== null) {
                                  r16 = parse___();
                                  if (r16 !== null) {
                                    r13 = [r15, r16];
                                  } else {
                                    r13 = null;
                                    pos = r14;
                                  }
                                } else {
                                  r13 = null;
                                  pos = r14;
                                }
                                r13 = r13 !== null ? r13 : "";
                                if (r13 !== null) {
                                  if (input.charCodeAt(pos) === 41) {
                                    r14 = ")";
                                    pos++;
                                  } else {
                                    r14 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\")\"");
                                    }
                                  }
                                  if (r14 !== null) {
                                    r15 = parse___();
                                    if (r15 !== null) {
                                      r16 = parse_Statement();
                                      if (r16 !== null) {
                                        r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16];
                                      } else {
                                        r0 = null;
                                        pos = r2;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r2;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(init, test, update, body) {
                  return {
                    type:   "ForStatement",
                    init:   extractOptional(init, 0),
                    test:   extractOptional(test, 0),
                    update: extractOptional(update, 0),
                    body:   body
                  };
                })(r7, r10, r13, r16);
            }
            if (r0 === null) {
              pos = r1;
            }
            if (r0 === null) {
              r1 = pos;
              r2 = pos;
              r3 = parse_ForToken();
              if (r3 !== null) {
                r4 = parse___();
                if (r4 !== null) {
                  if (input.charCodeAt(pos) === 40) {
                    r5 = "(";
                    pos++;
                  } else {
                    r5 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"(\"");
                    }
                  }
                  if (r5 !== null) {
                    r6 = parse___();
                    if (r6 !== null) {
                      r7 = parse_VarToken();
                      if (r7 !== null) {
                        r8 = parse___();
                        if (r8 !== null) {
                          r9 = parse_VariableDeclarationListNoIn();
                          if (r9 !== null) {
                            r10 = parse___();
                            if (r10 !== null) {
                              if (input.charCodeAt(pos) === 59) {
                                r11 = ";";
                                pos++;
                              } else {
                                r11 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\";\"");
                                }
                              }
                              if (r11 !== null) {
                                r12 = parse___();
                                if (r12 !== null) {
                                  r14 = pos;
                                  r15 = parse_Expression();
                                  if (r15 !== null) {
                                    r16 = parse___();
                                    if (r16 !== null) {
                                      r13 = [r15, r16];
                                    } else {
                                      r13 = null;
                                      pos = r14;
                                    }
                                  } else {
                                    r13 = null;
                                    pos = r14;
                                  }
                                  r13 = r13 !== null ? r13 : "";
                                  if (r13 !== null) {
                                    if (input.charCodeAt(pos) === 59) {
                                      r14 = ";";
                                      pos++;
                                    } else {
                                      r14 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\";\"");
                                      }
                                    }
                                    if (r14 !== null) {
                                      r15 = parse___();
                                      if (r15 !== null) {
                                        r17 = pos;
                                        r18 = parse_Expression();
                                        if (r18 !== null) {
                                          r19 = parse___();
                                          if (r19 !== null) {
                                            r16 = [r18, r19];
                                          } else {
                                            r16 = null;
                                            pos = r17;
                                          }
                                        } else {
                                          r16 = null;
                                          pos = r17;
                                        }
                                        r16 = r16 !== null ? r16 : "";
                                        if (r16 !== null) {
                                          if (input.charCodeAt(pos) === 41) {
                                            r17 = ")";
                                            pos++;
                                          } else {
                                            r17 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (r17 !== null) {
                                            r18 = parse___();
                                            if (r18 !== null) {
                                              r19 = parse_Statement();
                                              if (r19 !== null) {
                                                r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17, r18, r19];
                                              } else {
                                                r0 = null;
                                                pos = r2;
                                              }
                                            } else {
                                              r0 = null;
                                              pos = r2;
                                            }
                                          } else {
                                            r0 = null;
                                            pos = r2;
                                          }
                                        } else {
                                          r0 = null;
                                          pos = r2;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r2;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r2;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
              if (r0 !== null) {
                reportedPos = r1;
                r0 = (function(declarations, test, update, body) {
                    return {
                      type:   "ForStatement",
                      init:   {
                        type:         "VariableDeclaration",
                        declarations: declarations
                      },
                      test:   extractOptional(test, 0),
                      update: extractOptional(update, 0),
                      body:   body
                    };
                  })(r9, r13, r16, r19);
              }
              if (r0 === null) {
                pos = r1;
              }
              if (r0 === null) {
                r1 = pos;
                r2 = pos;
                r3 = parse_ForToken();
                if (r3 !== null) {
                  r4 = parse___();
                  if (r4 !== null) {
                    if (input.charCodeAt(pos) === 40) {
                      r5 = "(";
                      pos++;
                    } else {
                      r5 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (r5 !== null) {
                      r6 = parse___();
                      if (r6 !== null) {
                        r7 = parse_LeftHandSideExpression();
                        if (r7 !== null) {
                          r8 = parse___();
                          if (r8 !== null) {
                            r9 = parse_InToken();
                            if (r9 !== null) {
                              r10 = parse___();
                              if (r10 !== null) {
                                r11 = parse_Expression();
                                if (r11 !== null) {
                                  r12 = parse___();
                                  if (r12 !== null) {
                                    if (input.charCodeAt(pos) === 41) {
                                      r13 = ")";
                                      pos++;
                                    } else {
                                      r13 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (r13 !== null) {
                                      r14 = parse___();
                                      if (r14 !== null) {
                                        r15 = parse_Statement();
                                        if (r15 !== null) {
                                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15];
                                        } else {
                                          r0 = null;
                                          pos = r2;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r2;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r2;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
                if (r0 !== null) {
                  reportedPos = r1;
                  r0 = (function(left, right, body) {
                      return {
                        type:  "ForInStatement",
                        left:  left,
                        right: right,
                        body:  body
                      };
                    })(r7, r11, r15);
                }
                if (r0 === null) {
                  pos = r1;
                }
                if (r0 === null) {
                  r1 = pos;
                  r2 = pos;
                  r3 = parse_ForToken();
                  if (r3 !== null) {
                    r4 = parse___();
                    if (r4 !== null) {
                      if (input.charCodeAt(pos) === 40) {
                        r5 = "(";
                        pos++;
                      } else {
                        r5 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"(\"");
                        }
                      }
                      if (r5 !== null) {
                        r6 = parse___();
                        if (r6 !== null) {
                          r7 = parse_VarToken();
                          if (r7 !== null) {
                            r8 = parse___();
                            if (r8 !== null) {
                              r9 = parse_VariableDeclarationListNoIn();
                              if (r9 !== null) {
                                r10 = parse___();
                                if (r10 !== null) {
                                  r11 = parse_InToken();
                                  if (r11 !== null) {
                                    r12 = parse___();
                                    if (r12 !== null) {
                                      r13 = parse_Expression();
                                      if (r13 !== null) {
                                        r14 = parse___();
                                        if (r14 !== null) {
                                          if (input.charCodeAt(pos) === 41) {
                                            r15 = ")";
                                            pos++;
                                          } else {
                                            r15 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\")\"");
                                            }
                                          }
                                          if (r15 !== null) {
                                            r16 = parse___();
                                            if (r16 !== null) {
                                              r17 = parse_Statement();
                                              if (r17 !== null) {
                                                r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16, r17];
                                              } else {
                                                r0 = null;
                                                pos = r2;
                                              }
                                            } else {
                                              r0 = null;
                                              pos = r2;
                                            }
                                          } else {
                                            r0 = null;
                                            pos = r2;
                                          }
                                        } else {
                                          r0 = null;
                                          pos = r2;
                                        }
                                      } else {
                                        r0 = null;
                                        pos = r2;
                                      }
                                    } else {
                                      r0 = null;
                                      pos = r2;
                                    }
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                  if (r0 !== null) {
                    reportedPos = r1;
                    r0 = (function(declarations, right, body) {
                        return {
                          type:  "ForInStatement",
                          left:  {
                            type:         "VariableDeclaration",
                            declarations: declarations
                          },
                          right: right,
                          body:  body
                        };
                      })(r9, r13, r17);
                  }
                  if (r0 === null) {
                    pos = r1;
                  }
                }
              }
            }
          }
        }
        return r0;
      }
      
      function parse_ContinueStatement() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_ContinueToken();
        if (r3 !== null) {
          r4 = parse_EOS();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
              return { type: "ContinueStatement", label: null };
            })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_ContinueToken();
          if (r3 !== null) {
            r4 = parse__();
            if (r4 !== null) {
              r5 = parse_Identifier();
              if (r5 !== null) {
                r6 = parse_EOS();
                if (r6 !== null) {
                  r0 = [r3, r4, r5, r6];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(label) {
                return { type: "ContinueStatement", label: label };
              })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_BreakStatement() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_BreakToken();
        if (r3 !== null) {
          r4 = parse_EOS();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
              return { type: "BreakStatement", label: null };
            })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_BreakToken();
          if (r3 !== null) {
            r4 = parse__();
            if (r4 !== null) {
              r5 = parse_Identifier();
              if (r5 !== null) {
                r6 = parse_EOS();
                if (r6 !== null) {
                  r0 = [r3, r4, r5, r6];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(label) {
                return { type: "BreakStatement", label: label };
              })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_ReturnStatement() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_ReturnToken();
        if (r3 !== null) {
          r4 = parse_EOS();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() {
              return { type: "ReturnStatement", argument: null };
            })();
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_ReturnToken();
          if (r3 !== null) {
            r4 = parse__();
            if (r4 !== null) {
              r5 = parse_Expression();
              if (r5 !== null) {
                r6 = parse_EOS();
                if (r6 !== null) {
                  r0 = [r3, r4, r5, r6];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(argument) {
                return { type: "ReturnStatement", argument: argument };
              })(r5);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_WithStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_WithToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 40) {
              r5 = "(";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Expression();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_Statement();
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(object, body) { return { type: "WithStatement", object: object, body: body }; })(r7, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_SwitchStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_SwitchToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 40) {
              r5 = "(";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Expression();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_CaseBlock();
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(discriminant, cases) {
              return {
                type:         "SwitchStatement",
                discriminant: discriminant,
                cases:        cases
              };
            })(r7, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_CaseBlock() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        if (input.charCodeAt(pos) === 123) {
          r3 = "{";
          pos++;
        } else {
          r3 = null;
          if (reportFailures === 0) {
            matchFailed("\"{\"");
          }
        }
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse_CaseClauses();
            if (r7 !== null) {
              r8 = parse___();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 125) {
                r6 = "}";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"}\"");
                }
              }
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(clauses) {
              return optionalList(extractOptional(clauses, 0));
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          if (input.charCodeAt(pos) === 123) {
            r3 = "{";
            pos++;
          } else {
            r3 = null;
            if (reportFailures === 0) {
              matchFailed("\"{\"");
            }
          }
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r6 = pos;
              r7 = parse_CaseClauses();
              if (r7 !== null) {
                r8 = parse___();
                if (r8 !== null) {
                  r5 = [r7, r8];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
              r5 = r5 !== null ? r5 : "";
              if (r5 !== null) {
                r6 = parse_DefaultClause();
                if (r6 !== null) {
                  r7 = parse___();
                  if (r7 !== null) {
                    r9 = pos;
                    r10 = parse_CaseClauses();
                    if (r10 !== null) {
                      r11 = parse___();
                      if (r11 !== null) {
                        r8 = [r10, r11];
                      } else {
                        r8 = null;
                        pos = r9;
                      }
                    } else {
                      r8 = null;
                      pos = r9;
                    }
                    r8 = r8 !== null ? r8 : "";
                    if (r8 !== null) {
                      if (input.charCodeAt(pos) === 125) {
                        r9 = "}";
                        pos++;
                      } else {
                        r9 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"}\"");
                        }
                      }
                      if (r9 !== null) {
                        r0 = [r3, r4, r5, r6, r7, r8, r9];
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(before, default_, after) {
                return optionalList(extractOptional(before, 0))
                  .concat(default_)
                  .concat(optionalList(extractOptional(after, 0)));
              })(r5, r6, r8);
          }
          if (r0 === null) {
            pos = r1;
          }
        }
        return r0;
      }
      
      function parse_CaseClauses() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_CaseClause();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_CaseClause();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_CaseClause();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) { return buildList(first, rest, 1); })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_CaseClause() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_CaseToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_Expression();
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 58) {
                  r7 = ":";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\":\"");
                  }
                }
                if (r7 !== null) {
                  r9 = pos;
                  r10 = parse___();
                  if (r10 !== null) {
                    r11 = parse_StatementList();
                    if (r11 !== null) {
                      r8 = [r10, r11];
                    } else {
                      r8 = null;
                      pos = r9;
                    }
                  } else {
                    r8 = null;
                    pos = r9;
                  }
                  r8 = r8 !== null ? r8 : "";
                  if (r8 !== null) {
                    r0 = [r3, r4, r5, r6, r7, r8];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(test, consequent) {
              return {
                type:       "SwitchCase",
                test:       test,
                consequent: optionalList(extractOptional(consequent, 1))
              };
            })(r5, r8);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_DefaultClause() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_DefaultToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 58) {
              r5 = ":";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (r5 !== null) {
              r7 = pos;
              r8 = parse___();
              if (r8 !== null) {
                r9 = parse_StatementList();
                if (r9 !== null) {
                  r6 = [r8, r9];
                } else {
                  r6 = null;
                  pos = r7;
                }
              } else {
                r6 = null;
                pos = r7;
              }
              r6 = r6 !== null ? r6 : "";
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(consequent) {
              return {
                type:       "SwitchCase",
                test:       null,
                consequent: optionalList(extractOptional(consequent, 1))
              };
            })(r6);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_LabelledStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_Identifier();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 58) {
              r5 = ":";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\":\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Statement();
                if (r7 !== null) {
                  r0 = [r3, r4, r5, r6, r7];
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(label, body) {
              return { type: "LabeledStatement", label: label, body: body };
            })(r3, r7);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_ThrowStatement() {
        var r0, r1, r2, r3, r4, r5, r6;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_ThrowToken();
        if (r3 !== null) {
          r4 = parse__();
          if (r4 !== null) {
            r5 = parse_Expression();
            if (r5 !== null) {
              r6 = parse_EOS();
              if (r6 !== null) {
                r0 = [r3, r4, r5, r6];
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(argument) {
              return { type: "ThrowStatement", argument: argument };
            })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_TryStatement() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_TryToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_Block();
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Catch();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    r9 = parse_Finally();
                    if (r9 !== null) {
                      r0 = [r3, r4, r5, r6, r7, r8, r9];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(block, handler, finalizer) {
              return {
                type:      "TryStatement",
                block:     block,
                handler:   handler,
                finalizer: finalizer
              };
            })(r5, r7, r9);
        }
        if (r0 === null) {
          pos = r1;
        }
        if (r0 === null) {
          r1 = pos;
          r2 = pos;
          r3 = parse_TryToken();
          if (r3 !== null) {
            r4 = parse___();
            if (r4 !== null) {
              r5 = parse_Block();
              if (r5 !== null) {
                r6 = parse___();
                if (r6 !== null) {
                  r7 = parse_Catch();
                  if (r7 !== null) {
                    r0 = [r3, r4, r5, r6, r7];
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
          if (r0 !== null) {
            reportedPos = r1;
            r0 = (function(block, handler) {
                return {
                  type:      "TryStatement",
                  block:     block,
                  handler:   handler,
                  finalizer: null
                };
              })(r5, r7);
          }
          if (r0 === null) {
            pos = r1;
          }
          if (r0 === null) {
            r1 = pos;
            r2 = pos;
            r3 = parse_TryToken();
            if (r3 !== null) {
              r4 = parse___();
              if (r4 !== null) {
                r5 = parse_Block();
                if (r5 !== null) {
                  r6 = parse___();
                  if (r6 !== null) {
                    r7 = parse_Finally();
                    if (r7 !== null) {
                      r0 = [r3, r4, r5, r6, r7];
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
            if (r0 !== null) {
              reportedPos = r1;
              r0 = (function(block, finalizer) {
                  return {
                    type:      "TryStatement",
                    block:     block,
                    handler:   null,
                    finalizer: finalizer
                  };
                })(r5, r7);
            }
            if (r0 === null) {
              pos = r1;
            }
          }
        }
        return r0;
      }
      
      function parse_Catch() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_CatchToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            if (input.charCodeAt(pos) === 40) {
              r5 = "(";
              pos++;
            } else {
              r5 = null;
              if (reportFailures === 0) {
                matchFailed("\"(\"");
              }
            }
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                r7 = parse_Identifier();
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        r11 = parse_Block();
                        if (r11 !== null) {
                          r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11];
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(param, body) {
              return {
                type:  "CatchClause",
                param: param,
                body:  body
              };
            })(r7, r11);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Finally() {
        var r0, r1, r2, r3, r4, r5;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_FinallyToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_Block();
            if (r5 !== null) {
              r0 = [r3, r4, r5];
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(block) { return block; })(r5);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_DebuggerStatement() {
        var r0, r1, r2, r3, r4;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_DebuggerToken();
        if (r3 !== null) {
          r4 = parse_EOS();
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function() { return { type: "DebuggerStatement" }; })();
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_FunctionDeclaration() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_FunctionToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r5 = parse_Identifier();
            if (r5 !== null) {
              r6 = parse___();
              if (r6 !== null) {
                if (input.charCodeAt(pos) === 40) {
                  r7 = "(";
                  pos++;
                } else {
                  r7 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"(\"");
                  }
                }
                if (r7 !== null) {
                  r8 = parse___();
                  if (r8 !== null) {
                    r10 = pos;
                    r11 = parse_FormalParameterList();
                    if (r11 !== null) {
                      r12 = parse___();
                      if (r12 !== null) {
                        r9 = [r11, r12];
                      } else {
                        r9 = null;
                        pos = r10;
                      }
                    } else {
                      r9 = null;
                      pos = r10;
                    }
                    r9 = r9 !== null ? r9 : "";
                    if (r9 !== null) {
                      if (input.charCodeAt(pos) === 41) {
                        r10 = ")";
                        pos++;
                      } else {
                        r10 = null;
                        if (reportFailures === 0) {
                          matchFailed("\")\"");
                        }
                      }
                      if (r10 !== null) {
                        r11 = parse___();
                        if (r11 !== null) {
                          if (input.charCodeAt(pos) === 123) {
                            r12 = "{";
                            pos++;
                          } else {
                            r12 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"{\"");
                            }
                          }
                          if (r12 !== null) {
                            r13 = parse___();
                            if (r13 !== null) {
                              r14 = parse_FunctionBody();
                              if (r14 !== null) {
                                r15 = parse___();
                                if (r15 !== null) {
                                  if (input.charCodeAt(pos) === 125) {
                                    r16 = "}";
                                    pos++;
                                  } else {
                                    r16 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"}\"");
                                    }
                                  }
                                  if (r16 !== null) {
                                    r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15, r16];
                                  } else {
                                    r0 = null;
                                    pos = r2;
                                  }
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(id, params, body) {
              return {
                type:   "FunctionDeclaration",
                id:     id,
                params: optionalList(extractOptional(params, 0)),
                body:   body
              };
            })(r5, r9, r14);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_FunctionExpression() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_FunctionToken();
        if (r3 !== null) {
          r4 = parse___();
          if (r4 !== null) {
            r6 = pos;
            r7 = parse_Identifier();
            if (r7 !== null) {
              r8 = parse___();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
            r5 = r5 !== null ? r5 : "";
            if (r5 !== null) {
              if (input.charCodeAt(pos) === 40) {
                r6 = "(";
                pos++;
              } else {
                r6 = null;
                if (reportFailures === 0) {
                  matchFailed("\"(\"");
                }
              }
              if (r6 !== null) {
                r7 = parse___();
                if (r7 !== null) {
                  r9 = pos;
                  r10 = parse_FormalParameterList();
                  if (r10 !== null) {
                    r11 = parse___();
                    if (r11 !== null) {
                      r8 = [r10, r11];
                    } else {
                      r8 = null;
                      pos = r9;
                    }
                  } else {
                    r8 = null;
                    pos = r9;
                  }
                  r8 = r8 !== null ? r8 : "";
                  if (r8 !== null) {
                    if (input.charCodeAt(pos) === 41) {
                      r9 = ")";
                      pos++;
                    } else {
                      r9 = null;
                      if (reportFailures === 0) {
                        matchFailed("\")\"");
                      }
                    }
                    if (r9 !== null) {
                      r10 = parse___();
                      if (r10 !== null) {
                        if (input.charCodeAt(pos) === 123) {
                          r11 = "{";
                          pos++;
                        } else {
                          r11 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"{\"");
                          }
                        }
                        if (r11 !== null) {
                          r12 = parse___();
                          if (r12 !== null) {
                            r13 = parse_FunctionBody();
                            if (r13 !== null) {
                              r14 = parse___();
                              if (r14 !== null) {
                                if (input.charCodeAt(pos) === 125) {
                                  r15 = "}";
                                  pos++;
                                } else {
                                  r15 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"}\"");
                                  }
                                }
                                if (r15 !== null) {
                                  r0 = [r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, r13, r14, r15];
                                } else {
                                  r0 = null;
                                  pos = r2;
                                }
                              } else {
                                r0 = null;
                                pos = r2;
                              }
                            } else {
                              r0 = null;
                              pos = r2;
                            }
                          } else {
                            r0 = null;
                            pos = r2;
                          }
                        } else {
                          r0 = null;
                          pos = r2;
                        }
                      } else {
                        r0 = null;
                        pos = r2;
                      }
                    } else {
                      r0 = null;
                      pos = r2;
                    }
                  } else {
                    r0 = null;
                    pos = r2;
                  }
                } else {
                  r0 = null;
                  pos = r2;
                }
              } else {
                r0 = null;
                pos = r2;
              }
            } else {
              r0 = null;
              pos = r2;
            }
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(id, params, body) {
              return {
                type:   "FunctionExpression",
                id:     extractOptional(id, 0),
                params: optionalList(extractOptional(params, 0)),
                body:   body
              };
            })(r5, r8, r13);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_FormalParameterList() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, r10;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_Identifier();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            if (input.charCodeAt(pos) === 44) {
              r8 = ",";
              pos++;
            } else {
              r8 = null;
              if (reportFailures === 0) {
                matchFailed("\",\"");
              }
            }
            if (r8 !== null) {
              r9 = parse___();
              if (r9 !== null) {
                r10 = parse_Identifier();
                if (r10 !== null) {
                  r5 = [r7, r8, r9, r10];
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              if (input.charCodeAt(pos) === 44) {
                r8 = ",";
                pos++;
              } else {
                r8 = null;
                if (reportFailures === 0) {
                  matchFailed("\",\"");
                }
              }
              if (r8 !== null) {
                r9 = parse___();
                if (r9 !== null) {
                  r10 = parse_Identifier();
                  if (r10 !== null) {
                    r5 = [r7, r8, r9, r10];
                  } else {
                    r5 = null;
                    pos = r6;
                  }
                } else {
                  r5 = null;
                  pos = r6;
                }
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 3);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_FunctionBody() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_SourceElements();
        r0 = r0 !== null ? r0 : "";
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body) {
              return {
                type: "BlockStatement",
                body: optionalList(body)
              };
            })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_Program() {
        var r0, r1;
        
        r1 = pos;
        r0 = parse_SourceElements();
        r0 = r0 !== null ? r0 : "";
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(body) {
              return {
                type: "Program",
                body: optionalList(body)
              };
            })(r0);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_SourceElements() {
        var r0, r1, r2, r3, r4, r5, r6, r7, r8;
        
        r1 = pos;
        r2 = pos;
        r3 = parse_SourceElement();
        if (r3 !== null) {
          r4 = [];
          r6 = pos;
          r7 = parse___();
          if (r7 !== null) {
            r8 = parse_SourceElement();
            if (r8 !== null) {
              r5 = [r7, r8];
            } else {
              r5 = null;
              pos = r6;
            }
          } else {
            r5 = null;
            pos = r6;
          }
          while (r5 !== null) {
            r4.push(r5);
            r6 = pos;
            r7 = parse___();
            if (r7 !== null) {
              r8 = parse_SourceElement();
              if (r8 !== null) {
                r5 = [r7, r8];
              } else {
                r5 = null;
                pos = r6;
              }
            } else {
              r5 = null;
              pos = r6;
            }
          }
          if (r4 !== null) {
            r0 = [r3, r4];
          } else {
            r0 = null;
            pos = r2;
          }
        } else {
          r0 = null;
          pos = r2;
        }
        if (r0 !== null) {
          reportedPos = r1;
          r0 = (function(first, rest) {
              return buildList(first, rest, 1);
            })(r3, r4);
        }
        if (r0 === null) {
          pos = r1;
        }
        return r0;
      }
      
      function parse_SourceElement() {
        var r0;
        
        r0 = parse_Statement();
        if (r0 === null) {
          r0 = parse_FunctionDeclaration();
        }
        return r0;
      }
      
      function parse_Letter() {
        var r0;
        
        if (/^[^ [\],(){}\n\uEFEF\uEFFE\uEFFF<>="']/.test(input.charAt(pos))) {
          r0 = input.charAt(pos);
          pos++;
        } else {
          r0 = null;
          if (reportFailures === 0) {
            matchFailed("[^ [\\],(){}\\n\\uEFEF\\uEFFE\\uEFFF<>=\"']");
          }
        }
        return r0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      
        var TYPES_TO_PROPERTY_NAMES = {
          CallExpression:   "callee",
          MemberExpression: "object",
        };
      
        function filledArray(count, value) {
          var result = new Array(count), i;
      
          for (i = 0; i < count; i++) {
            result[i] = value;
          }
      
          return result;
        }
      
        function extractOptional(optional, index) {
          return optional ? optional[index] : null;
        }
      
        function extractList(list, index) {
          var result = new Array(list.length), i;
      
          for (i = 0; i < list.length; i++) {
            result[i] = list[i][index];
          }
      
          return result;
        }
      
        function buildList(first, rest, index) {
          return [first].concat(extractList(rest, index));
        }
      
        function buildTree(first, rest, builder) {
          var result = first, i;
      
          for (i = 0; i < rest.length; i++) {
            result = builder(result, rest[i]);
          }
      
          return result;
        }
      
        function buildBinaryExpression(first, rest) {
          return buildTree(first, rest, function(result, element) {
            return {
              type:     "BinaryExpression",
              operator: element[1],
              left:     result,
              right:    element[3]
            };
          });
        }
      
        function buildLogicalExpression(first, rest) {
          return buildTree(first, rest, function(result, element) {
            return {
              type:     "LogicalExpression",
              operator: element[1],
              left:     result,
              right:    element[3]
            };
          });
        }
      
        function optionalList(value) {
          return value !== null ? value : [];
        }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        reportedPos = Math.max(pos, rightmostFailuresPos);
        var found = reportedPos < input.length ? input.charAt(reportedPos) : null;
        var reportedPosDetails = computeReportedPosDetails();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          reportedPos,
          reportedPosDetails.line,
          reportedPosDetails.column
        );
      }
      
      return result;
    }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  subclass(result.SyntaxError, Error);
  
  return result;
})();
